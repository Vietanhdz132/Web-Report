const reportPVTN = require('../../models/report/phongVTN');
const { ObjectId } = require('mongodb');

class PhongVTNController {
  /**
   * [POST] /report/create - T·∫°o b√°o c√°o m·ªõi
   */
  async createReport(req, res) {
    try {
      const body = req.body;

      // Chu·∫©n h√≥a d·ªØ li·ªáu ƒë·∫ßu v√†o n·∫øu c·∫ßn
      const report = {
        reportName: body.reportName || '',
        recipient: body.recipient || '',
        number: body.number || '',
        createdAt: body.createdAt ? new Date(body.createdAt) : new Date(),
        department: 'Ph√≤ng V√¥ Tuy·∫øn',
        sections: body.sections || {}, // ph·∫ßn n√†y b·∫°n c·∫ßn ƒë·∫£m b·∫£o frontend g·ª≠i ƒë√∫ng
        receivers: body.receivers || '',
        signer: body.signer || '',
        position: body.position || ''
      };

      

      const insertedId = await reportPVTN.insertReport(report);
      res.status(201).json({ success: true, insertedId });
    } catch (err) {
      console.error('‚ùå Error creating report:', err);
      res.status(500).json({ success: false, message: 'Server error' });
    }
  }

  /**
   * [GET] /report - L·∫•y t·∫•t c·∫£ b√°o c√°o
   */
  async getAllReports(req, res) {
    try {
      const reports = await reportPVTN.getAllReports();

      const processedReports = reports.map((r, i) => ({
        _id: r._id,
        number: r.number || '',
        reportName: r.reportName || `B√°o c√°o tu·∫ßn ${r.week || ''}`,
        date: r.createdAt ? new Date(r.createdAt).toLocaleDateString('vi-VN') : '',
        department: r.department ,
        stt: i + 1,
      }));

      res.json({ success: true, reports: processedReports });
    } catch (err) {
      console.error('‚ùå Error fetching reports:', err);
      res.status(500).json({ success: false });
    }
  }



  /**
   * [GET] /report/:id - L·∫•y b√°o c√°o theo ID
   */
  async getReportById(req, res) {
    try {
      const id = req.params.id;
      if (!ObjectId.isValid(id)) {
        return res.status(400).json({ success: false, message: 'ID kh√¥ng h·ª£p l·ªá' });
      }

      const report = await reportPVTN.getReportById(id);
      if (!report) {
        return res.status(404).json({ success: false, message: 'Kh√¥ng t√¨m th·∫•y b√°o c√°o' });
      }

      res.json(report);
    } catch (err) {
      console.error('‚ùå Error fetching report by ID:', err);
      res.status(500).json({ success: false });
    }
  }

  /**
   * [PUT] /report/:id - C·∫≠p nh·∫≠t b√°o c√°o
   */
  async updateReport(req, res) {
    try {
      const id = req.params.id;
      if (!ObjectId.isValid(id)) {
        return res.status(400).json({ success: false, message: 'ID kh√¥ng h·ª£p l·ªá' });
      }

      const update = req.body;
      // C√≥ th·ªÉ th√™m validate update n·∫øu c·∫ßn

      const count = await reportPVTN.updateReport(id, update);
      if (count > 0) {
        res.json({ success: true });
      } else {
        res.status(404).json({ success: false, message: 'Kh√¥ng t√¨m th·∫•y b√°o c√°o ƒë·ªÉ c·∫≠p nh·∫≠t' });
      }
    } catch (err) {
      console.error('‚ùå Error updating report:', err);
      res.status(500).json({ success: false });
    }
  }

  /**
   * [DELETE] /report/:id - X√≥a b√°o c√°o
   */
  async deleteReport(req, res) {

    try {
      const id = req.params.id;
      if (!ObjectId.isValid(id)) {
        return res.status(400).json({ success: false, message: 'ID kh√¥ng h·ª£p l·ªá' });
      }

      const count = await reportPVTN.deleteReport(id);
      if (count > 0) {
        return res.json({ success: true, message: 'X√≥a b√°o c√°o th√†nh c√¥ng' });
      } else {
        return res.status(404).json({ success: false, message: 'Kh√¥ng t√¨m th·∫•y b√°o c√°o ƒë·ªÉ x√≥a' });
      }
    } catch (err) {
      console.error('‚ùå Error deleting report:', err);
      return res.status(500).json({ success: false, message: 'L·ªói server khi x√≥a b√°o c√°o' });
    }
  }


  /**
   * [GET] /report/department/:department - L·∫•y b√°o c√°o theo ph√≤ng ban
   */
  async getReportsByDepartment(req, res) {
    try {
      const department = req.params.department;
      if (!department) {
        return res.status(400).json({ success: false, message: 'Thi·∫øu ph√≤ng ban' });
      }

      const reports = await reportPVTN.getReportsByDepartment(department);
      res.json(reports);
    } catch (err) {
      console.error('‚ùå Error fetching by department:', err);
      res.status(500).json({ success: false });
    }
  }

  /**
   * [GET] /report/range?start=yyyy-mm-dd&end=yyyy-mm-dd - L·∫•y b√°o c√°o theo kho·∫£ng ng√†y
   */
  async getReportsByDateRange(req, res) {
    try {
      const { start, end } = req.query;
      if (!start || !end) {
        return res.status(400).json({ success: false, message: 'Thi·∫øu kho·∫£ng ng√†y' });
      }

      const startDate = new Date(start);
      const endDate = new Date(end);
      if (isNaN(startDate) || isNaN(endDate)) {
        return res.status(400).json({ success: false, message: 'Ng√†y kh√¥ng h·ª£p l·ªá' });
      }

      const reports = await reportPVTN.getReportsByDateRange(startDate, endDate);
      res.json(reports);
    } catch (err) {
      console.error('‚ùå Error fetching by date range:', err);
      res.status(500).json({ success: false });
    }
  }

  /**
   * [GET] /report/view - Giao di·ªán danh s√°ch HTML
   */
  async viewAll(req, res) {
    try {
      res.render('report/pvtn', {
        layout: 'reportLayout',
        title: 'B√°o c√°o tu·∫ßn Ph√≤ng V√¥ Tuy·∫øn'
      });
    } catch (err) {
      console.error('Render error:', err);
      res.status(500).render('404', { layout: 'reportLayout' });
    }
  }

  /**
   * [GET] /report/detail/:id - Giao di·ªán chi ti·∫øt b√°o c√°o
   */
  async viewDetail(req, res) {
    try {
      const id = req.params.id;
      if (!ObjectId.isValid(id)) {
        return res.status(400).send('ID kh√¥ng h·ª£p l·ªá');
      }

      const report = await reportPVTN.getReportById(id);
      
      if (!report) return res.status(404).send('Kh√¥ng t√¨m th·∫•y b√°o c√°o');
      // console.log('üìù D·ªØ li·ªáu b√°o c√°o:', JSON.stringify(report, null, 2));

      res.render('report/viewreport', {
        layout: 'reportLayout',
        report
      });
    } catch (err) {
      console.error('‚ùå Error khi xem chi ti·∫øt:', err);
      res.status(500).send('L·ªói khi xem chi ti·∫øt');
    }
  }

  /**
   * [GET] /report/create - Giao di·ªán t·∫°o b√°o c√°o
   */
  async showCreateForm(req, res) {
    try {
      res.render('report/create', {
        layout: 'reportLayout',
        title: 'T·∫°o B√°o C√°o Tu·∫ßn - Ph√≤ng V√¥ Tuy·∫øn'
      });
    } catch (err) {
      console.error('Render error:', err);
      res.status(500).render('404', { layout: 'reportLayout' });
    }
  }
}

module.exports = new PhongVTNController();
