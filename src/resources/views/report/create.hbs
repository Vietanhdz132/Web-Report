<div class="report-pvt-create">
  <h1 class="report-pvt-create__title">Tạo Báo Cáo Tuần Mới - Phòng Vô Tuyến</h1>

  <form id="createReportForm" action="/report/create" method="POST" class="report-pvt-create__form">
    <!-- Thông tin chung -->
    <div class="report-pvt-create__group">
      <label for="reportName">Tên báo cáo</label>
      <input id="reportName" name="reportName" type="text" placeholder="VD: BÁO CÁO TUẦN 1" required />
    </div>

    <div class="report-pvt-create__group">
      <label for="recipient">Kính gửi</label>
      <input id="recipient" name="recipient" type="text" placeholder="VD: Giám đốc Trung tâm Mạng lưới MobiFone miền Bắc " required />
    </div>


  <div class="report-pvt-create__group">
    <label for="number">Số hiệu</label>
    <input id="number" name="number" type="text" placeholder="VD: 25">
  </div>

  {{!-- <div class="report-pvt-create__group">
    <label for="receivers">Kính gửi</label>
    <textarea id="receivers" name="receivers" rows="3" placeholder="Nhập danh sách người nhận" required></textarea>
  </div> --}}

  <div class="report-pvt-create__group">
    <label for="createdAt">Ngày tạo</label>
    <input id="createdAt" name="createdAt" type="date" required />
  </div>


    <!-- I. Đánh giá kết quả triển khai -->
    <hr />
    <h2>I. ĐÁNH GIÁ KẾT QUẢ TRIỂN KHAI</h2>

    <div class="report-pvt-create__group" data-section="bscKpi">
      <h4>1. Kết quả thực hiện BSC-KPI</h4>
      <div class="report-section__children"></div>
      <div class="report-section__tools">
        <button type="button" class="btn-add-subitem" onclick="addChild(this, 'bscKpi')">➕ Thêm mục con</button>
        <button type="button" class="btn-add-table" onclick="addTable(this, 'bscKpi')">📊 Thêm bảng</button>
      </div>
    </div>

    <h4>2. Công việc trọng tâm</h4>

    <div class="report-pvt-create__group" data-section="tuh">
      <label for="tuh">Công tác TUH</label>
      <div class="report-section__children"></div>
      <div class="report-section__tools">
        <button type="button" class="btn-add-subitem" onclick="addChild(this, 'tuh')">➕ Thêm mục con</button>
        <button type="button" class="btn-add-table" onclick="addTable(this, 'tuh')">📊 Thêm bảng</button>
      </div>
    </div>

    <div class="report-pvt-create__group" data-section="ptm">
      <label for="ptm">Công tác PTM</label>
      <div class="report-section__children"></div>
      <div class="report-section__tools">
        <button type="button" class="btn-add-subitem" onclick="addChild(this, 'ptm')">➕ Thêm mục con</button>
        <button type="button" class="btn-add-table" onclick="addTable(this, 'ptm')">📊 Thêm bảng</button>
      </div>
    </div>

    <div class="report-pvt-create__group" data-section="cntt">
      <label for="cntt">Công tác CNTT</label>
      <div class="report-section__children"></div>
      <div class="report-section__tools">
        <button type="button" class="btn-add-subitem" onclick="addChild(this, 'cntt')">➕ Thêm mục con</button>
        <button type="button" class="btn-add-table" onclick="addTable(this, 'cntt')">📊 Thêm bảng</button>
      </div>
    </div>

    <div class="report-pvt-create__group" data-section="vhm">
      <label for="vhm">Công tác VHM</label>
      <div class="report-section__children"></div>
      <div class="report-section__tools">
        <button type="button" class="btn-add-subitem" onclick="addChild(this, 'vhm')">➕ Thêm mục con</button>
        <button type="button" class="btn-add-table" onclick="addTable(this, 'vhm')">📊 Thêm bảng</button>
      </div>
    </div>

    <div class="report-pvt-create__group" data-section="khcp">
      <label for="khcp">Công tác KHCP</label>
      <div class="report-section__children"></div>
      <div class="report-section__tools">
        <button type="button" class="btn-add-subitem" onclick="addChild(this, 'khcp')">➕ Thêm mục con</button>
        <button type="button" class="btn-add-table" onclick="addTable(this, 'khcp')">📊 Thêm bảng</button>
      </div>
    </div>

    <!-- II. Kết luận chỉ đạo -->
    <hr />
    <h2>II. THỰC HIỆN KẾT LUẬN, CHỈ ĐẠO</h2>
    <div class="report-pvt-create__group" data-section="conclusion">
      <h4>Nội dung kết luận, chỉ đạo</h4>
      <div class="report-section__children"></div>
      <div class="report-section__tools">
        <button type="button" class="btn-add-subitem" onclick="addChild(this, 'conclusion')">➕ Thêm mục con</button>
        <button type="button" class="btn-add-table" onclick="addTable(this, 'conclusion')">📊 Thêm bảng</button>
      </div>
    </div>

    <!-- III. Tồn tại, kiến nghị -->
    <hr />
    <h2>III. TỒN TẠI, KIẾN NGHỊ</h2>
    <div class="report-pvt-create__group" data-section="kientnghi_ldtt">
      <h4>1. Kiến nghị với LĐTT/TCT</h4>
      <div class="report-section__children"></div>
      <div class="report-section__tools">
        <button type="button" class="btn-add-subitem" onclick="addChild(this, 'kientnghi_ldtt')">➕ Thêm mục con</button>
        <button type="button" class="btn-add-table" onclick="addTable(this, 'kientnghi_ldtt')">📊 Thêm bảng</button>
      </div>
    </div>

    <div class="report-pvt-create__group" data-section="kientnghi_dvkhac">
      <h4>2. Kiến nghị với đơn vị khác</h4>
      <div class="report-section__children"></div>
      <div class="report-section__tools">
        <button type="button" class="btn-add-subitem" onclick="addChild(this, 'kientnghi_dvkhac')">➕ Thêm mục con</button>
        <button type="button" class="btn-add-table" onclick="addTable(this, 'kientnghi_dvkhac')">📊 Thêm bảng</button>
      </div>
    </div>

    <!-- IV. Kế hoạch tuần tới -->
    <hr />
    <h2>IV. KẾ HOẠCH TUẦN TỚI</h2>

    <div class="report-pvt-create__group" data-section="kehoach_tuh">
      <label>Công tác TUH</label>
      <div class="report-section__children"></div>
      <div class="report-section__tools">
        <button type="button" class="btn-add-subitem" onclick="addChild(this, 'kehoach_tuh')">➕ Thêm mục con</button>
        <button type="button" class="btn-add-table" onclick="addTable(this, 'kehoach_tuh')">📊 Thêm bảng</button>
      </div>
    </div>

    <div class="report-pvt-create__group" data-section="kehoach_ptm">
      <label>Công tác PTM</label>
      <div class="report-section__children"></div>
      <div class="report-section__tools">
        <button type="button" class="btn-add-subitem" onclick="addChild(this, 'kehoach_ptm')">➕ Thêm mục con</button>
        <button type="button" class="btn-add-table" onclick="addTable(this, 'kehoach_ptm')">📊 Thêm bảng</button>
      </div>
    </div>

    <div class="report-pvt-create__group" data-section="kehoach_cntt">
      <label>Công tác CNTT</label>
      <div class="report-section__children"></div>
      <div class="report-section__tools">
        <button type="button" class="btn-add-subitem" onclick="addChild(this, 'kehoach_cntt')">➕ Thêm mục con</button>
        <button type="button" class="btn-add-table" onclick="addTable(this, 'kehoach_cntt')">📊 Thêm bảng</button>
      </div>
    </div>

    <div class="report-pvt-create__group" data-section="kehoach_vhm">
      <label>Công tác VHM</label>
      <div class="report-section__children"></div>
      <div class="report-section__tools">
        <button type="button" class="btn-add-subitem" onclick="addChild(this, 'kehoach_vhm')">➕ Thêm mục con</button>
        <button type="button" class="btn-add-table" onclick="addTable(this, 'kehoach_vhm')">📊 Thêm bảng</button>
      </div>
    </div>

    <div class="report-pvt-create__group" data-section="kehoach_khcp">
      <label>Công tác KHCP</label>
      <div class="report-section__children"></div>
      <div class="report-section__tools">
        <button type="button" class="btn-add-subitem" onclick="addChild(this, 'kehoach_khcp')">➕ Thêm mục con</button>
        <button type="button" class="btn-add-table" onclick="addTable(this, 'kehoach_khcp')">📊 Thêm bảng</button>
      </div>
    </div>

    <!-- Nơi nhận -->
    <hr />
    <h2>NƠI NHẬN</h2>
    <div class="report-pvt-create__group">
      <label for="receivers">Nơi nhận</label>
      <textarea id="receivers" name="receivers" rows="4" required>- Như trên;
- Ban GĐTT;
- Tổng hợp, TCHC;
- Lưu VTN.
      </textarea>
    </div>

    <!-- Ký tên -->
    <hr />
    <h2>Thông tin ký báo cáo</h2>
    <div class="report-pvt-create__group">
      <label for="signer">Người ký</label>
      <input id="signer" name="signer" type="text" value="Đỗ Duy Bình" required />
    </div>
    <div class="report-pvt-create__group">
      <label for="position">Chức vụ</label>
      <input id="position" name="position" type="text" value="TRƯỞNG PHÒNG" required />
    </div>

    <div class="report-pvt-create__actions">
      <button  type="submit">💾 Lưu báo cáo</button>
      <a href="/report" class="btn-cancel">Hủy</a>
    </div>
  </form>
</div>

<script>
  window.addEventListener('DOMContentLoaded', () => {
    const today = new Date().toISOString().split('T')[0];
    document.getElementById('createdAt').value = today;
  });
</script>


<script>
  
  function autoResizeTextarea(textarea) {
  textarea.style.height = 'auto';        // reset chiều cao
  textarea.style.height = textarea.scrollHeight + 'px'; // đặt lại theo nội dung
}


// Thêm mục con (chỉ có 1 cấp con thôi, không lồng tiếp)
function addChild(button, section, containerOverride) {
  const container = containerOverride || button.closest('.report-pvt-create__group').querySelector('.report-section__children');

  const wrapper = document.createElement('div');
  wrapper.className = 'report-subitem';
  wrapper.style.marginBottom = '10px';
  wrapper.style.border = '1px solid #ccc';
  wrapper.style.padding = '10px';
  wrapper.style.borderRadius = '8px';
  wrapper.style.borderLeft = '3px dashed #aaa';
  wrapper.style.backgroundColor = '#fafafa';

  // Tiêu đề mục con
  const title = document.createElement('textarea');
  title.placeholder = 'Tiêu đề mục con';
  title.rows = 1;
  title.style.width = '100%';
  title.style.marginBottom = '6px';
  title.addEventListener('input', () => autoResizeTextarea(title));
  autoResizeTextarea(title);

  // Vùng chứa nội dung phụ và bảng
  const itemsContainer = document.createElement('div');
  itemsContainer.className = 'report-section__children';
  itemsContainer.style.marginTop = '10px';
  itemsContainer.style.borderLeft = '2px dashed #aaa';
  itemsContainer.style.paddingLeft = '10px';
  itemsContainer.style.backgroundColor = '#fafafa';

  // Nhóm nút ở dưới cùng (3 nút cùng hàng)
  const buttonGroup = document.createElement('div');
    buttonGroup.style.display = 'flex';
    buttonGroup.style.justifyContent = 'space-between';
    buttonGroup.style.gap = '10px';
    buttonGroup.style.marginTop = '10px';
    buttonGroup.style.marginLeft = '0'; 

  // Nút Xoá mục con
  const removeBtn = document.createElement('button');
  removeBtn.type = 'button';
  removeBtn.textContent = '❌ Xoá mục con';
  removeBtn.onclick = () => wrapper.remove();

  // Nút Thêm bảng (màu xanh)
  const addTableBtn = document.createElement('button');
  addTableBtn.type = 'button';
  addTableBtn.textContent = '📊 Thêm bảng';
  addTableBtn.style.backgroundColor = '#007acc';
  addTableBtn.style.color = '#fff';
  addTableBtn.style.border = 'none';
  addTableBtn.style.padding = '6px 12px';
  addTableBtn.style.borderRadius = '5px';
  addTableBtn.style.cursor = 'pointer';
  addTableBtn.style.fontWeight = '600';
 
  addTableBtn.onclick = () => addTable(addTableBtn, section, itemsContainer);

  // Nút Thêm nội dung (màu xanh)
  const addExtraBtn = document.createElement('button');
  addExtraBtn.type = 'button';
  addExtraBtn.textContent = '➕ Thêm nội dung';
  addExtraBtn.style.backgroundColor = '#007acc';
  addExtraBtn.style.color = '#fff';
  addExtraBtn.style.border = 'none';
  addExtraBtn.style.padding = '6px 12px';
  addExtraBtn.style.borderRadius = '5px';
  addExtraBtn.style.cursor = 'pointer';
  addExtraBtn.style.fontWeight = '600';
  addExtraBtn.onmouseenter = () => (addExtraBtn.style.backgroundColor = '#005fa3');
  addExtraBtn.onmouseleave = () => (addExtraBtn.style.backgroundColor = '#007acc');
  addExtraBtn.onclick = () => addExtraContent(addExtraBtn, itemsContainer);

  // Gộp 3 nút vào nhóm
  buttonGroup.appendChild(removeBtn);
  buttonGroup.appendChild(addTableBtn);
  buttonGroup.appendChild(addExtraBtn);
  // Gộp vào nhóm
  buttonGroup.appendChild(addExtraBtn);
  buttonGroup.appendChild(addTableBtn);

  buttonGroup.appendChild(removeBtn);

  // Gộp vào wrapper theo thứ tự
  wrapper.appendChild(title);
  wrapper.appendChild(itemsContainer);
  wrapper.appendChild(buttonGroup);

  container.appendChild(wrapper);
}


function addTable(button, section, containerOverride, level = 1) {
  const container = containerOverride || button.closest('.report-pvt-create__group').querySelector('.report-section__children');

  const wrapper = document.createElement('div');
  wrapper.className = 'report-subtable';
  wrapper.style.backgroundColor = '#fafafa';
  wrapper.style.padding = '10px';
  wrapper.style.marginBottom = '10px';
  wrapper.style.marginLeft = `${level * 20}px`;

  const title = document.createElement('textarea');
  title.placeholder = 'Tiêu đề bảng';
  title.rows = 1;
  title.style.width = '100%';
  title.style.resize = 'vertical';
  title.style.marginBottom = '10px';
  title.style.fontWeight = '600';
  title.addEventListener('input', () => autoResizeTextarea(title));
  autoResizeTextarea(title);

  const config = document.createElement('div');
  config.style.display = 'flex';
  config.style.alignItems = 'center';
  config.style.gap = '10px';
  config.style.marginBottom = '10px';

  const rowsLabel = document.createElement('label');
  rowsLabel.textContent = 'Số hàng:';
  const rowsInput = document.createElement('input');
  rowsInput.type = 'number';
  rowsInput.min = 1;
  rowsInput.value = 3;
  rowsInput.style.width = '60px';
  rowsInput.style.marginLeft = '6px';
  rowsLabel.appendChild(rowsInput);

  const colsLabel = document.createElement('label');
  colsLabel.textContent = 'Số cột:';
  const colsInput = document.createElement('input');
  colsInput.type = 'number';
  colsInput.min = 1;
  colsInput.value = 3;
  colsInput.style.width = '60px';
  colsInput.style.marginLeft = '6px';
  colsLabel.style.marginLeft = '20px';
  colsLabel.appendChild(colsInput);

  const createBtn = document.createElement('button');
  createBtn.type = 'button';
  createBtn.textContent = 'Tạo bảng';
  Object.assign(createBtn.style, {
    padding: '6px 12px',
    cursor: 'pointer',
    border: 'none',
    borderRadius: '5px',
    backgroundColor: '#0078d7',
    color: 'white',
    fontWeight: '600'
  });

  const selectBtn = document.createElement('button');
  selectBtn.type = 'button';
  selectBtn.textContent = 'Chọn ô cần gộp';
  Object.assign(selectBtn.style, {
    padding: '6px 12px',
    cursor: 'pointer',
    border: 'none',
    borderRadius: '5px',
    backgroundColor: '#ffc107',
    color: '#000',
    fontWeight: '600',
  });

  const confirmMergeBtn = document.createElement('button');
  confirmMergeBtn.type = 'button';
  confirmMergeBtn.textContent = 'Gộp các ô đã chọn';
  confirmMergeBtn.style.display = 'none';
  Object.assign(confirmMergeBtn.style, {
    padding: '6px 12px',
    cursor: 'pointer',
    border: 'none',
    borderRadius: '5px',
    backgroundColor: '#28a745',
    color: 'white',
    fontWeight: '600'
  });

  const cancelMergeBtn = document.createElement('button');
  cancelMergeBtn.type = 'button';
  cancelMergeBtn.textContent = 'Huỷ';
  cancelMergeBtn.style.display = 'none';
  Object.assign(cancelMergeBtn.style, {
    padding: '6px 12px',
    cursor: 'pointer',
    border: 'none',
    borderRadius: '5px',
    backgroundColor: '#dc3545',
    color: 'white',
    fontWeight: '600'
  });

  config.appendChild(rowsLabel);
  config.appendChild(colsLabel);
  config.appendChild(createBtn);
  config.appendChild(selectBtn);
  config.appendChild(confirmMergeBtn);
  config.appendChild(cancelMergeBtn);

  const table = document.createElement('table');
  table.className = 'editable-table';
  Object.assign(table.style, {
    width: '100%',
    borderCollapse: 'collapse',
    marginTop: '10px'
  });

  function syncRowHeight(tr) {
    let maxHeight = 0;
    const textareas = tr.querySelectorAll('textarea');
    textareas.forEach(ta => {
      ta.style.height = 'auto';
      const h = ta.scrollHeight;
      if (h > maxHeight) maxHeight = h;
    });
    textareas.forEach(ta => {
      ta.style.height = maxHeight + 'px';
    });
  }

  function createTable(rows, cols) {
    table.innerHTML = '';
    for (let r = 0; r < rows; r++) {
      const tr = document.createElement('tr');
      for (let c = 0; c < cols; c++) {
        const td = document.createElement('td');
        td.style.border = '1px solid #ccc';
        td.style.padding = '4px';

        const wrapperDiv = document.createElement('div');
        wrapperDiv.className = 'table-cell-wrapper';
        wrapperDiv.style.position = 'relative';

        const checkbox = document.createElement('input');
        checkbox.type = 'checkbox';
        checkbox.className = 'table-cell-checkbox';
        checkbox.style.position = 'absolute';
        checkbox.style.top = '2px';
        checkbox.style.left = '2px';
        checkbox.style.zIndex = '1';
        checkbox.style.display = 'none';

        const textarea = document.createElement('textarea');
        textarea.rows = 1;
        textarea.style.width = '100%';
        textarea.style.boxSizing = 'border-box';
        textarea.style.resize = 'vertical';
        textarea.style.fontFamily = 'inherit';

        if (r === 0) {
          textarea.placeholder = `Tiêu đề cột ${c + 1}`;
          textarea.style.fontWeight = 'bold';
          textarea.style.backgroundColor = '#f0f0f0';
        }

        textarea.addEventListener('input', () => {
          autoResizeTextarea(textarea);
          syncRowHeight(tr);
        });

        autoResizeTextarea(textarea);

        wrapperDiv.appendChild(checkbox);
        wrapperDiv.appendChild(textarea);
        td.appendChild(wrapperDiv);
        tr.appendChild(td);
      }
      table.appendChild(tr);
    }
  }

  createBtn.onclick = () => {
    const rows = parseInt(rowsInput.value);
    const cols = parseInt(colsInput.value);
    if (rows > 0 && cols > 0) {
      createTable(rows, cols);
    } else {
      alert('Số hàng và số cột phải lớn hơn 0');
    }
  };

  let isSelecting = false;

  selectBtn.onclick = () => {
    isSelecting = true;
    selectBtn.style.display = 'none';
    confirmMergeBtn.style.display = 'inline-block';
    cancelMergeBtn.style.display = 'inline-block';

    const checkboxes = table.querySelectorAll('.table-cell-checkbox');
    checkboxes.forEach(cb => {
      cb.checked = false;
      cb.style.display = 'block';
    });
  };

  cancelMergeBtn.onclick = () => {
    isSelecting = false;
    selectBtn.style.display = 'inline-block';
    confirmMergeBtn.style.display = 'none';
    cancelMergeBtn.style.display = 'none';

    const checkboxes = table.querySelectorAll('.table-cell-checkbox');
    checkboxes.forEach(cb => {
      cb.checked = false;
      cb.style.display = 'none';
    });
  };

  // Hàm tính vị trí cột "ảo" dựa trên colSpan của các ô trong 1 hàng
  function getCellsPositionsInRow(row) {
    const positions = [];
    let colPos = 0;
    for (const cell of row.cells) {
      positions.push({ cell, startCol: colPos, colSpan: cell.colSpan || 1 });
      colPos += cell.colSpan || 1;
    }
    return positions;
  }

  // Hàm kiểm tra các ô có liền kề trong 1 hàng không
  function areCellsContiguousInRow(row, selectedCells) {
    const positions = getCellsPositionsInRow(row);

    const selectedPositions = positions.filter(p => selectedCells.includes(p.cell));

    // Sắp xếp theo vị trí cột ảo
    selectedPositions.sort((a, b) => a.startCol - b.startCol);

    for (let i = 1; i < selectedPositions.length; i++) {
      const prev = selectedPositions[i - 1];
      const curr = selectedPositions[i];
      if (prev.startCol + prev.colSpan !== curr.startCol) {
        return false;
      }
    }
    return true;
  }

  // Hàm tính vị trí hàng "ảo" dựa trên rowSpan của các ô trong 1 cột
  function getCellsPositionsInCol(table, colIndex) {
    const positions = [];
    let rowPos = 0;
    for (let r = 0; r < table.rows.length; r++) {
      const row = table.rows[r];
      let colCount = 0;
      for (const cell of row.cells) {
        const colSpan = cell.colSpan || 1;
        const rowSpan = cell.rowSpan || 1;
        if (colCount === colIndex) {
          positions.push({ cell, startRow: rowPos, rowSpan });
          break;
        }
        colCount += colSpan;
      }
      rowPos++;
    }
    return positions;
  }

  // Kiểm tra các ô có liền kề trong 1 cột không
  function areCellsContiguousInCol(table, colIndex, selectedCells) {
    const positions = getCellsPositionsInCol(table, colIndex);

    const selectedPositions = positions.filter(p => selectedCells.includes(p.cell));

    // Sắp xếp theo vị trí hàng ảo
    selectedPositions.sort((a, b) => a.startRow - b.startRow);

    for (let i = 1; i < selectedPositions.length; i++) {
      const prev = selectedPositions[i - 1];
      const curr = selectedPositions[i];
      if (prev.startRow + prev.rowSpan !== curr.startRow) {
        return false;
      }
    }
    return true;
  }

  // Hàm tạo ma trận 2D bảng (dùng cho vị trí thực tế của các ô, hỗ trợ rowspan/colspan)
function buildTableMatrix(table) {
  const matrix = [];
  const rows = table.rows.length;
  for (let r = 0; r < rows; r++) matrix[r] = [];
  for (let r = 0; r < rows; r++) {
    const row = table.rows[r];
    let colPos = 0;
    for (let c = 0; c < row.cells.length; c++) {
      const cell = row.cells[c];
      const rowSpan = cell.rowSpan || 1;
      const colSpan = cell.colSpan || 1;

      // Tìm vị trí trống đầu tiên trên hàng r
      while (matrix[r][colPos]) colPos++;

      // Đánh dấu cell chiếm vị trí (r..r+rowSpan, colPos..colPos+colSpan)
      for (let rs = 0; rs < rowSpan; rs++) {
        for (let cs = 0; cs < colSpan; cs++) {
          matrix[r + rs][colPos + cs] = cell;
        }
      }

      colPos += colSpan;
    }
  }
  return matrix;
}

// Hàm lấy vị trí (row, col) thực tế của các ô được chọn
function getSelectedCellsPositions(table, selectedCells) {
  const matrix = buildTableMatrix(table);
  const positions = [];
  for (let r = 0; r < matrix.length; r++) {
    for (let c = 0; c < matrix[r].length; c++) {
      const cell = matrix[r][c];
      if (selectedCells.includes(cell)) {
        if (!positions.find(p => p.cell === cell)) {
          positions.push({ cell, rowIndex: r, colIndex: c });
        }
      }
    }
  }
  return positions;
}

// Kiểm tra các ô có liền kề trong cùng hàng
function areCellsContiguousInRow(positions) {
  const row = positions[0].rowIndex;
  if (!positions.every(p => p.rowIndex === row)) return false;

  const cols = positions.map(p => p.colIndex).sort((a, b) => a - b);

  for (let i = 1; i < cols.length; i++) {
    if (cols[i] !== cols[i - 1] + 1) return false;
  }
  return true;
}

// Kiểm tra các ô có liền kề trong cùng cột
function areCellsContiguousInCol(positions) {
  const col = positions[0].colIndex;
  if (!positions.every(p => p.colIndex === col)) return false;

  const rows = positions.map(p => p.rowIndex).sort((a, b) => a - b);

  for (let i = 1; i < rows.length; i++) {
    if (rows[i] !== rows[i - 1] + 1) return false;
  }
  return true;
}

// Hàm gộp ô được chọn, dùng ma trận vị trí chính xác và set colSpan/rowSpan + width/height
confirmMergeBtn.onclick = () => {
  const checkboxes = table.querySelectorAll('.table-cell-checkbox:checked');
  const selectedCells = Array.from(checkboxes).map(cb => cb.closest('td'));

  if (selectedCells.length <= 1) {
    alert('Chọn ít nhất 2 ô để gộp');
    return;
  }

  const positions = getSelectedCellsPositions(table, selectedCells);

  const sameRow = positions.every(p => p.rowIndex === positions[0].rowIndex);
  const sameCol = positions.every(p => p.colIndex === positions[0].colIndex);

  if (!sameRow && !sameCol) {
    alert('Chỉ có thể gộp các ô cùng hàng hoặc cùng cột!');
    return;
  }

  if (sameRow) {
    if (!areCellsContiguousInRow(positions)) {
      alert('Các ô trong cùng hàng phải liền kề để gộp');
      return;
    }

    positions.sort((a, b) => a.colIndex - b.colIndex);

    const main = positions[0].cell;
    let content = '';

    positions.forEach((pos, idx) => {
      const ta = pos.cell.querySelector('textarea');
      if (ta && ta.value.trim()) content += (idx === 0 ? '' : '\n') + ta.value;
      if (idx > 0) pos.cell.remove();
    });

    const taMain = main.querySelector('textarea');
    taMain.value = content;

    main.colSpan = positions.length;
    main.style.width = ''; // Bỏ set width thủ công, để trình duyệt tự tính
    main.style.height = ''; // Reset chiều cao nếu có
    main.rowSpan = 1;
  }
 else if (sameCol) {
  if (!areCellsContiguousInCol(positions)) {
    alert('Các ô trong cùng cột phải liền kề để gộp');
    return;
  }

  positions.sort((a, b) => a.rowIndex - b.rowIndex);

  const main = positions[0].cell;
  let content = '';

  positions.forEach((pos, idx) => {
    const ta = pos.cell.querySelector('textarea');
    if (ta && ta.value.trim()) content += (idx === 0 ? '' : '\n') + ta.value;
    if (idx > 0) pos.cell.remove();
  });

  const taMain = main.querySelector('textarea');
  taMain.value = content;

  main.rowSpan = positions.length;
  main.colSpan = 1;
  main.style.width = ''; // reset chiều rộng nếu có

  // Tính chiều cao 1 ô chuẩn (rowSpan=1) ở cột gộp
  let singleCellHeight = 0;
  const colIndex = positions[0].colIndex;
  for (let r = 0; r < table.rows.length; r++) {
    let colCount = 0;
    const row = table.rows[r];
    for (const cell of row.cells) {
      if (colCount === colIndex && (cell.rowSpan || 1) === 1) {
        singleCellHeight = cell.getBoundingClientRect().height;
        break;
      }
      colCount += cell.colSpan || 1;
    }
    if (singleCellHeight) break;
  }

  if (singleCellHeight) {
    main.style.height = (singleCellHeight * positions.length) + 'px';
  } else {
    main.style.height = '';
  }
}


  // Reset lại trạng thái chọn và ẩn checkbox
  isSelecting = false;
  selectBtn.style.display = 'inline-block';
  confirmMergeBtn.style.display = 'none';
  cancelMergeBtn.style.display = 'none';

  const allCheckboxes = table.querySelectorAll('.table-cell-checkbox');
  allCheckboxes.forEach(cb => {
    cb.checked = false;
    cb.style.display = 'none';
  });
};



  wrapper.appendChild(title);
  wrapper.appendChild(config);
  wrapper.appendChild(table);
  container.appendChild(wrapper);
}



// Thêm ô nội dung phụ (textarea) trong mục con
function addExtraContent(button, containerOverride, level = 1) {
  const container = containerOverride || button.closest('.report-pvt-create__group').querySelector('.report-section__children');

  const wrapper = document.createElement('div');
  wrapper.className = 'report-subitem-extra';

  wrapper.style.backgroundColor = '#f9f9f9';
  wrapper.style.marginBottom = '10px';

  const textarea = document.createElement('textarea');
  textarea.placeholder = 'Nội dung';
  textarea.rows = 2;
  textarea.style.width = '100%';
  textarea.style.resize = 'vertical';
  textarea.addEventListener('input', () => autoResizeTextarea(textarea));
  autoResizeTextarea(textarea);

  const removeBtn = document.createElement('button');
  removeBtn.type = 'button';
  removeBtn.textContent = '❌ Xoá nội dung';
  removeBtn.style.marginTop = '6px';
  removeBtn.style.backgroundColor = '#d35454';
  removeBtn.style.color = 'white';
  removeBtn.style.border = 'none';
  removeBtn.style.padding = '4px 8px';
  removeBtn.style.borderRadius = '5px';
  removeBtn.style.cursor = 'pointer';

  removeBtn.onmouseenter = () => (removeBtn.style.backgroundColor = '#a82727');
  removeBtn.onmouseleave = () => (removeBtn.style.backgroundColor = '#d35454');
  removeBtn.onclick = () => wrapper.remove();

  wrapper.appendChild(textarea);
  wrapper.appendChild(removeBtn);

  container.appendChild(wrapper);
}

function collectTableData(tableEl) {
  const rows = tableEl?.rows || [];
  const matrix = []; // ma trận 2D đánh dấu ô đã lấy

  const cellsData = [];

  for (let r = 0; r < rows.length; r++) {
    const row = rows[r];
    let colIndex = 0;

    cellsData[r] = [];

    for (let c = 0; c < row.cells.length; c++) {
      // Tìm colIndex trống tiếp theo trong ma trận
      while (matrix[r] && matrix[r][colIndex]) {
        colIndex++;
      }

      const cell = row.cells[c];
      const textarea = cell.querySelector('textarea');

      const rowSpan = cell.rowSpan || 1;
      const colSpan = cell.colSpan || 1;

      // Chỉ lấy ô gốc (ô đầu tiên trong vùng gộp)
      cellsData[r][colIndex] = {
        text: textarea ? textarea.value.trim() : '',
        rowSpan,
        colSpan
      };

      // Đánh dấu các ô trong vùng gộp trong ma trận để bỏ qua sau
      for (let rs = 0; rs < rowSpan; rs++) {
        for (let cs = 0; cs < colSpan; cs++) {
          if (!matrix[r + rs]) matrix[r + rs] = [];
          matrix[r + rs][colIndex + cs] = true;
        }
      }

      colIndex += colSpan;
    }
  }

  return cellsData;
}


  // Thu thập dữ liệu đệ quy mục con + bảng, đúng thứ tự
function collectSectionData(section) {
  const group = document.querySelector(`[data-section="${section}"]`);
  if (!group) return [];

  const container = group.querySelector('.report-section__children');
  if (!container) return [];

  const results = [];

  Array.from(container.children).forEach(child => {
    if (child.classList.contains('report-subitem')) {
      const textareas = child.querySelectorAll('textarea');
      const title = textareas[0]?.value.trim() || '';
      const content = textareas[1]?.value.trim() || '';
      // Thu thập con lồng bên trong
      const subContainer = child.querySelector('.report-section__children');
      const children = subContainer ? collectSectionChildren(subContainer) : [];

      results.push({ type: 'text', title, content, children });
    } else if (child.classList.contains('report-subtable')) {
  const title = child.querySelector('textarea')?.value.trim() || '';
  const tableEl = child.querySelector('table');

  const cells = collectTableData(tableEl);

  results.push({ type: 'table', title, cells });
}

  });

  return results;
}

// Thu thập đệ quy con bên trong mục con (dùng cho children)
function collectSectionChildren(container) {
  const results = [];
  Array.from(container.children).forEach(child => {
    if (child.classList.contains('report-subitem')) {
      const textareas = child.querySelectorAll('textarea');
      const title = textareas[0]?.value.trim() || '';
      const content = textareas[1]?.value.trim() || '';
      const subContainer = child.querySelector('.report-section__children');
      const children = subContainer ? collectSectionChildren(subContainer) : [];
      results.push({ type: 'text', title, content, children });
    } else if (child.classList.contains('report-subtable')) {
      const title = child.querySelector('textarea')?.value.trim() || '';
      const tableEl = child.querySelector('table');
      const rows = tableEl?.rows || [];

      const cells = [];
      for (let i = 0; i < rows.length; i++) {
        const row = rows[i];
        const rowData = [];
        for (let j = 0; j < row.cells.length; j++) {
          const cell = row.cells[j];
          const textarea = cell.querySelector('textarea');
          rowData.push({
            text: textarea ? textarea.value.trim() : '',
            rowSpan: cell.rowSpan || 1,
            colSpan: cell.colSpan || 1
          });
        }
        cells.push(rowData);
      }

      results.push({ type: 'table', title, cells });
    }
  });
  return results;
}


  // Gửi dữ liệu form + mục con + bảng
  // Gửi dữ liệu
    document.getElementById('createReportForm').addEventListener('submit', function (e) {
    e.preventDefault();

    const form = e.target;
    const data = {
      reportName: form.reportName.value,
      number: form.number.value,
      recipient: form.recipient.value,
      createdAt: form.createdAt.value,
      receivers: form.receivers.value,
      signer: form.signer.value,
      position: form.position.value,
      sections: {}
    };

    const sectionKeys = ['bscKpi', 'tuh', 'ptm', 'cntt', 'vhm', 'khcp', 'conclusion', 'kientnghi_ldtt', 'kientnghi_dvkhac', 'kehoach_tuh', 'kehoach_ptm', 'kehoach_cntt', 'kehoach_vhm', 'kehoach_khcp'];

    sectionKeys.forEach(section => {
      data.sections[section] = collectSectionData(section);
    });

    console.log('Dữ liệu gửi lên:', data);

    fetch('/report/pvt', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(data),
    }).then(res => res.json())
      .then(result => {
        if (result.success) alert('Lưu báo cáo thành công!');
        
        else alert('Lỗi lưu báo cáo');
      }).catch(() => alert('Lỗi kết nối server'));
  });

  // Gán sự kiện nút thêm mục con cấp 1
  
</script>

