<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/jquery-resizable-columns@0.2.3/resizable-columns.css" />
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/jquery-resizable-columns@0.2.3/jquery.resizableColumns.min.js"></script>

<div class="report-pvt-create">
  <h1 class="report-pvt-create__title">Tạo báo cáo mới - Phòng Vô Tuyến</h1>

  <form id="createReportForm" class="report-pvt-create__form">
    <!-- Thông tin chung -->
    <div class="report-pvt-create__group">
      <label for="reportName">Tên báo cáo</label>
      <select id="reportName" name="reportName" required>
        <option value="">-- Chọn tuần --</option>
        <!-- Tạo tuần từ 1 đến 54 -->
        <!-- Có thể tạo tự động bằng JavaScript (xem dưới) -->
      </select>
    </div>

    <div class="report-pvt-create__group">
      <label for="recipient">Kính gửi</label>
      <input
        id="recipient"
        name="recipient"
        type="text"
        value="Giám đốc Trung tâm Mạng lưới MobiFone miền Bắc"
        placeholder="VD: Giám đốc Trung tâm Mạng lưới MobiFone miền Bắc"
        required
      />
    </div>

    <div class="report-pvt-create__group">
      <label for="number">Số hiệu</label>
      <input id="number" name="number" type="text" >
    </div>

    {{!-- <div class="report-pvt-create__group">
      <label for="receivers">Kính gửi</label>
      <textarea id="receivers" name="receivers" rows="3"
        placeholder="Nhập danh sách người nhận" required></textarea>
    </div> --}}

    <div class="report-pvt-create__group">
      <label for="createdAt">Ngày tạo</label>
      <input id="createdAt" name="createdAt" type="date" required />
    </div>

    <!-- I. Đánh giá kết quả triển khai -->
    <hr />
    <h2>I. ĐÁNH GIÁ KẾT QUẢ TRIỂN KHAI</h2>

    <div class="report-pvt-create__group" data-section="bscKpi">
      <h4>1. Kết quả thực hiện BSC-KPI</h4>
      <div class="report-section__children"></div>
      <div class="report-section__tools">
        <button type="button" class="btn-add-subitem"
          onclick="addChild(this, 'bscKpi')">➕ Thêm mục</button>
        <button type="button" class="btn-add-table"
          onclick="addTable(this, 'bscKpi')">📊 Thêm bảng</button>
      </div>
    </div>

    <h4>2. Công việc trọng tâm</h4>

    <div class="report-pvt-create__group" data-section="tuh">
      <label for="tuh">Công tác TUH</label>
      <div class="report-section__children"></div>
      <div class="report-section__tools">
        <button type="button" class="btn-add-subitem"
          onclick="addChild(this, 'tuh')">➕ Thêm mục</button>
        <button type="button" class="btn-add-table"
          onclick="addTable(this, 'tuh')">📊 Thêm bảng</button>
      </div>
    </div>

    <div class="report-pvt-create__group" data-section="ptm">
      <label for="ptm">Công tác PTM</label>
      <div class="report-section__children"></div>
      <div class="report-section__tools">
        <button type="button" class="btn-add-subitem"
          onclick="addChild(this, 'ptm')">➕ Thêm mục</button>
        <button type="button" class="btn-add-table"
          onclick="addTable(this, 'ptm')">📊 Thêm bảng</button>
      </div>
    </div>

    <div class="report-pvt-create__group" data-section="cntt">
      <label for="cntt">Công tác CNTT</label>
      <div class="report-section__children"></div>
      <div class="report-section__tools">
        <button type="button" class="btn-add-subitem"
          onclick="addChild(this, 'cntt')">➕ Thêm mục</button>
        <button type="button" class="btn-add-table"
          onclick="addTable(this, 'cntt')">📊 Thêm bảng</button>
      </div>
    </div>

    <div class="report-pvt-create__group" data-section="vhm">
      <label for="vhm">Công tác VHM</label>
      <div class="report-section__children"></div>
      <div class="report-section__tools">
        <button type="button" class="btn-add-subitem"
          onclick="addChild(this, 'vhm')">➕ Thêm mục</button>
        <button type="button" class="btn-add-table"
          onclick="addTable(this, 'vhm')">📊 Thêm bảng</button>
      </div>
    </div>

    <div class="report-pvt-create__group" data-section="khcp">
      <label for="khcp">Công tác KHCP</label>
      <div class="report-section__children"></div>
      <div class="report-section__tools">
        <button type="button" class="btn-add-subitem"
          onclick="addChild(this, 'khcp')">➕ Thêm mục</button>
        <button type="button" class="btn-add-table"
          onclick="addTable(this, 'khcp')">📊 Thêm bảng</button>
      </div>
    </div>

    <!-- II. Kết luận chỉ đạo -->
    <hr />
    <h2>II. THỰC HIỆN KẾT LUẬN, CHỈ ĐẠO</h2>
    <div class="report-pvt-create__group" data-section="conclusion">
      <h4>Nội dung kết luận, chỉ đạo</h4>
      <div class="report-section__children"></div>
      <div class="report-section__tools">
        <button type="button" class="btn-add-subitem"
          onclick="addChild(this, 'conclusion')">➕ Thêm mục</button>
        <button type="button" class="btn-add-table"
          onclick="addTable(this, 'conclusion')">📊 Thêm bảng</button>
      </div>
    </div>

    <!-- III. Tồn tại, kiến nghị -->
    <hr />
    <h2>III. TỒN TẠI, KIẾN NGHỊ</h2>
    <div class="report-pvt-create__group" data-section="kientnghi_ldtt">
      <h4>1. Kiến nghị với LĐTT/TCT</h4>
      <div class="report-section__children"></div>
      <div class="report-section__tools">
        <button type="button" class="btn-add-subitem"
          onclick="addChild(this, 'kientnghi_ldtt')">➕ Thêm mục</button>
        <button type="button" class="btn-add-table"
          onclick="addTable(this, 'kientnghi_ldtt')">📊 Thêm bảng</button>
      </div>
    </div>

    <div class="report-pvt-create__group" data-section="kientnghi_dvkhac">
      <h4>2. Kiến nghị với đơn vị khác</h4>
      <div class="report-section__children"></div>
      <div class="report-section__tools">
        <button type="button" class="btn-add-subitem"
          onclick="addChild(this, 'kientnghi_dvkhac')">➕ Thêm mục</button>
        <button type="button" class="btn-add-table"
          onclick="addTable(this, 'kientnghi_dvkhac')">📊 Thêm bảng</button>
      </div>
    </div>

    <!-- IV. Kế hoạch tuần tới -->
    <hr />
    <h2 id="nextWeekHeading">IV. KẾ HOẠCH TUẦN TỚI</h2>

    <div class="report-pvt-create__group" data-section="kehoach_tuh">
      <label>Công tác TUH</label>
      <div class="report-section__children"></div>
      <div class="report-section__tools">
        <button type="button" class="btn-add-subitem"
          onclick="addChild(this, 'kehoach_tuh')">➕ Thêm mục</button>
        <button type="button" class="btn-add-table"
          onclick="addTable(this, 'kehoach_tuh')">📊 Thêm bảng</button>
      </div>
    </div>

    <div class="report-pvt-create__group" data-section="kehoach_ptm">
      <label>Công tác PTM</label>
      <div class="report-section__children"></div>
      <div class="report-section__tools">
        <button type="button" class="btn-add-subitem"
          onclick="addChild(this, 'kehoach_ptm')">➕ Thêm mục</button>
        <button type="button" class="btn-add-table"
          onclick="addTable(this, 'kehoach_ptm')">📊 Thêm bảng</button>
      </div>
    </div>

    <div class="report-pvt-create__group" data-section="kehoach_cntt">
      <label>Công tác CNTT</label>
      <div class="report-section__children"></div>
      <div class="report-section__tools">
        <button type="button" class="btn-add-subitem"
          onclick="addChild(this, 'kehoach_cntt')">➕ Thêm mục</button>
        <button type="button" class="btn-add-table"
          onclick="addTable(this, 'kehoach_cntt')">📊 Thêm bảng</button>
      </div>
    </div>

    <div class="report-pvt-create__group" data-section="kehoach_vhm">
      <label>Công tác VHM</label>
      <div class="report-section__children"></div>
      <div class="report-section__tools">
        <button type="button" class="btn-add-subitem"
          onclick="addChild(this, 'kehoach_vhm')">➕ Thêm mục</button>
        <button type="button" class="btn-add-table"
          onclick="addTable(this, 'kehoach_vhm')">📊 Thêm bảng</button>
      </div>
    </div>

    <div class="report-pvt-create__group" data-section="kehoach_khcp">
      <label>Công tác KHCP</label>
      <div class="report-section__children"></div>
      <div class="report-section__tools">
        <button type="button" class="btn-add-subitem"
          onclick="addChild(this, 'kehoach_khcp')">➕ Thêm mục</button>
        <button type="button" class="btn-add-table"
          onclick="addTable(this, 'kehoach_khcp')">📊 Thêm bảng</button>
      </div>
    </div>

    <!-- Nơi nhận -->
    <hr />
    <h2>NƠI NHẬN</h2>
    <div class="report-pvt-create__group">
      <label for="receivers">Nơi nhận</label>
      <textarea id="receivers" name="receivers" rows="4" required>
      </textarea>
    </div>

    <!-- Ký tên -->
    <hr />
    <h2>Thông tin ký báo cáo</h2>
    <div class="report-pvt-create__group">
      <label for="signer">Người ký</label>
      <input id="signer" name="signer" type="text" required />
    </div>
    <div class="report-pvt-create__group">
      <label for="position">Chức vụ</label>
      <input id="position" name="position" type="text" required />
    </div>

    <div class="report-pvt-create__actions">
      <button type="submit">💾 Lưu báo cáo</button>
      <a href="/report" class="btn-cancel">Hủy</a>
    </div>
  </form>
</div>

<style>
  /* Style cho select */
  #reportName {
    width: 100%;
    padding: 10px;
    border: 1px solid #ccc;
    border-radius: 6px;
    font-size: 16px;
    background-color: #ffffff;
    color: #333;
  }

  /* Style cho option – bị giới hạn ở nhiều trình duyệt */
  #reportName option {
    padding: 10px;
    font-size: 15px;
    color: #012d5a;
    background-color: #fff;
  }

  /* Tuỳ chọn: Style khi focus */
  #reportName:focus {
    outline: none;
    border-color: #007bff;
    box-shadow: 0 0 0 2px rgba(0, 123, 255, 0.25);
  }
</style>

<script>
  const select = document.getElementById('reportName');
  const numberInput = document.getElementById('number');

  // Tạo option từ tuần 1 đến 53
  for (let i = 1; i <= 53; i++) {
    const option = document.createElement('option');
    option.value = `BÁO CÁO TUẦN ${i}`;        
    option.dataset.week = i;                  
    option.textContent = `BÁO CÁO TUẦN ${i}`;
    select.appendChild(option);
  }

  // Khi chọn tuần, cập nhật số hiệu
  select.addEventListener('change', function () {
    const selectedOption = this.options[this.selectedIndex];
    const weekNumber = selectedOption.dataset.week;
    numberInput.value = weekNumber || '';
  });
</script>

<script>
  window.addEventListener('DOMContentLoaded', () => {
    const today = new Date().toISOString().split('T')[0];
    document.getElementById('createdAt').value = today;
  });
</script>


<script>
  const reportName = document.getElementById('reportName');
const heading = document.getElementById('nextWeekHeading');

function updateNextWeekHeading() {
  const selectedOption = reportName.options[reportName.selectedIndex];
  const match = selectedOption?.value?.match(/TUẦN\s+(\d+)/i);

  if (match) {
    const week = parseInt(match[1], 10);
    const nextWeek = week + 1;
    heading.textContent = `IV. KẾ HOẠCH TUẦN ${nextWeek}`;
  } else {
    heading.textContent = `IV. KẾ HOẠCH TUẦN TỚI`;
  }
}

// Gọi lần đầu (khi có sẵn reportName từ DB)
updateNextWeekHeading();

// Cập nhật khi người dùng thay đổi chọn
reportName.addEventListener('change', updateNextWeekHeading);

</script>

<script>
  document.querySelector('.btn-cancel').addEventListener('click', function (e) {
    const confirmed = confirm('Bạn có chắc chắn muốn hủy không?');
    if (!confirmed) {
      e.preventDefault();
    }
  });
</script>

<script>
  window.addEventListener('DOMContentLoaded', () => {
    const today = new Date().toISOString().split('T')[0];
    document.getElementById('createdAt').value = today;
  });
</script>
<script>
  
  function autoResizeTextarea(textarea) {
  textarea.style.height = 'auto';        // reset chiều cao
  textarea.style.height = textarea.scrollHeight + 'px'; // đặt lại theo nội dung
  textarea.style.transition = 'height 0.2s ease';
}

// Thêm mục (chỉ có 1 cấp con thôi, không lồng tiếp)
function addChild(button, section, containerOverride) {
  const container = containerOverride || button.closest('.report-pvt-create__group').querySelector('.report-section__children');

  const wrapper = document.createElement('div');
  wrapper.className = 'report-subitem';
  wrapper.style.marginBottom = '10px';
  wrapper.style.border = '1px solid #ccc';
  wrapper.style.padding = '10px';
  wrapper.style.borderRadius = '8px';
  wrapper.style.backgroundColor = '#fffff';

  // **Thay textarea nội dung thành textarea "title"**
  const titleTextarea = document.createElement('textarea');
  titleTextarea.placeholder = 'Tiêu đề mục con';
  titleTextarea.rows = 1;
  titleTextarea.style.width = '100%';
  titleTextarea.style.marginBottom = '6px';
  titleTextarea.style.resize = 'vertical';
  titleTextarea.style.fontWeight = '700';
  titleTextarea.addEventListener('input', () => autoResizeTextarea(titleTextarea));
  autoResizeTextarea(titleTextarea);

  // Vùng chứa nội dung phụ (bảng, nội dung con)
  const itemsContainer = document.createElement('div');
  itemsContainer.className = 'report-section__children';
  itemsContainer.style.marginTop = '10px';
  itemsContainer.style.borderLeft = '2px dashed #aaa';
  itemsContainer.style.paddingLeft = '10px';
  itemsContainer.style.backgroundColor = '#ffffff';

  // Nhóm nút dưới cùng (3 nút cùng hàng)
  const buttonGroup = document.createElement('div');
  buttonGroup.style.display = 'flex';
  buttonGroup.style.justifyContent = 'space-between';
  buttonGroup.style.gap = '10px';
  buttonGroup.style.marginTop = '10px';
  buttonGroup.style.marginLeft = '0'; 

  // Nút Xoá mục con
  const removeBtn = document.createElement('button');
  removeBtn.type = 'button';
  removeBtn.textContent = '❌ Xoá mục';
  removeBtn.onclick = () => {
    if (confirm('Bạn có chắc chắn muốn xoá mục này không?')) {
      wrapper.remove();
    }
  };

  // Nút Thêm bảng (màu xanh)
  const addTableBtn = document.createElement('button');
  addTableBtn.type = 'button';
  addTableBtn.textContent = '📊 Thêm bảng';
  addTableBtn.style.backgroundColor = '#007acc';
  addTableBtn.style.color = '#fff';
  addTableBtn.style.border = 'none';
  addTableBtn.style.padding = '6px 12px';
  addTableBtn.style.borderRadius = '5px';
  addTableBtn.style.cursor = 'pointer';
  addTableBtn.style.fontWeight = '600';
  addTableBtn.onclick = () => addTable(addTableBtn, section, itemsContainer);

  // Nút Thêm nội dung 
  const addExtraBtn = document.createElement('button');
  addExtraBtn.type = 'button';
  addExtraBtn.textContent = '➕ Thêm nội dung';
  addExtraBtn.style.backgroundColor = '#007acc';
  addExtraBtn.style.color = '#fff';
  addExtraBtn.style.border = 'none';
  addExtraBtn.style.padding = '6px 12px';
  addExtraBtn.style.borderRadius = '5px';
  addExtraBtn.style.cursor = 'pointer';
  addExtraBtn.style.fontWeight = '600';
  addExtraBtn.onmouseenter = () => (addExtraBtn.style.backgroundColor = '#005fa3');
  addExtraBtn.onmouseleave = () => (addExtraBtn.style.backgroundColor = '#007acc');
  addExtraBtn.onclick = () => addExtraContent(addExtraBtn, itemsContainer);

  // Gộp vào nhóm nút
  buttonGroup.appendChild(addExtraBtn);
  buttonGroup.appendChild(addTableBtn);
  buttonGroup.appendChild(removeBtn);

  wrapper.appendChild(titleTextarea);
  wrapper.appendChild(itemsContainer);
  wrapper.appendChild(buttonGroup);
  container.appendChild(wrapper);
}


function addTable(button, section, containerOverride, level = 1) {
  const container = containerOverride || button.closest('.report-pvt-create__group').querySelector('.report-section__children');

  const wrapper = document.createElement('div');
  wrapper.className = 'report-subtable';
 

  const title = document.createElement('textarea');
  title.placeholder = 'Tiêu đề bảng';
  title.rows = 1;
  title.style.width = '100%';
  title.style.resize = 'none';
  title.style.marginBottom = '10px';
  title.style.fontWeight = '600';
  title.addEventListener('input', () => autoResizeTextarea(title));
  autoResizeTextarea(title);

  const config = document.createElement('div');
  config.style.display = 'flex';
  config.style.alignItems = 'center';



  const rowsLabel = document.createElement('label');
  rowsLabel.textContent = 'Số hàng:';
  const rowsInput = document.createElement('input');
  rowsInput.type = 'number';
  rowsInput.min = 1;
  rowsInput.value = 3;
  rowsInput.style.width = '60px';
  rowsInput.style.marginLeft = '6px';
  rowsLabel.appendChild(rowsInput);

  const colsLabel = document.createElement('label');
  colsLabel.textContent = 'Số cột:';
  const colsInput = document.createElement('input');
  colsInput.type = 'number';
  colsInput.min = 1;
  colsInput.value = 3;
  colsInput.style.width = '60px';
  colsInput.style.marginLeft = '6px';
  colsLabel.style.marginLeft = '20px';
  colsLabel.appendChild(colsInput);

  const createBtn = document.createElement('button');
  createBtn.type = 'button';
  createBtn.textContent = 'Tạo bảng';
  Object.assign(createBtn.style, {
  
    cursor: 'pointer',
    border: 'none',
    borderRadius: '5px',
    backgroundColor: '#0078d7',
    color: 'white',
    fontWeight: '600'
  });
  const pasteBtn = document.createElement('button');
  pasteBtn.type = 'button';
  pasteBtn.textContent = '📋 Dán dữ liệu';
  Object.assign(pasteBtn.style, {
    backgroundColor: '#6f42c1',
    color: 'white',
    border: 'none',
    padding: '6px 12px',
    borderRadius: '5px',
    cursor: 'pointer',
    fontWeight: '600',
  });

  const selectBtn = document.createElement('button');
  selectBtn.type = 'button';
  selectBtn.textContent = 'Chọn ô cần gộp';
  Object.assign(selectBtn.style, {

    cursor: 'pointer',
    border: 'none',
    borderRadius: '5px',
    backgroundColor: '#ffc107',
    color: '#000',
    fontWeight: '600',
  });

  const confirmMergeBtn = document.createElement('button');
  confirmMergeBtn.type = 'button';
  confirmMergeBtn.textContent = 'Gộp các ô đã chọn';
  confirmMergeBtn.style.display = 'none';
  Object.assign(confirmMergeBtn.style, {

    cursor: 'pointer',
    border: 'none',
    borderRadius: '5px',
    backgroundColor: '#28a745',
    color: 'white',
    fontWeight: '600'
  });

  const cancelMergeBtn = document.createElement('button');
  cancelMergeBtn.type = 'button';
  cancelMergeBtn.textContent = 'Huỷ';
  cancelMergeBtn.style.display = 'none';
  Object.assign(cancelMergeBtn.style, {
    padding: '6px 12px',
    cursor: 'pointer',
    border: 'none',
    borderRadius: '5px',
    backgroundColor: '#dc3545',
    color: 'white',
    fontWeight: '600'
  });

  const deleteTableBtn = document.createElement('button');
      deleteTableBtn.type = 'button';
      deleteTableBtn.textContent = '❌ Xoá bảng';
      Object.assign(deleteTableBtn.style, {
        backgroundColor: '#e94e4e',
        color: 'white',
        border: 'none',
        padding: '6px 12px',
        borderRadius: '5px',
        cursor: 'pointer',
        fontWeight: '600',
      });

      deleteTableBtn.onclick = () => {
        if (confirm('Bạn có chắc chắn muốn xoá bảng này không?')) {
          wrapper.remove();
        }
      };

      const addRowBtn = document.createElement('button');
        addRowBtn.type = 'button';
        addRowBtn.textContent = '➕ Thêm hàng';
        Object.assign(addRowBtn.style, {
          backgroundColor: '#17a2b8',
          color: 'white',
          border: 'none',
          padding: '6px 12px',
          borderRadius: '5px',
          cursor: 'pointer',
          fontWeight: '600',
        });
        
        addRowBtn.onclick = () => {
          const newRow = document.createElement('tr');

          // Nếu có dòng nào rồi thì tạo số cột bằng dòng đầu tiên
          const numCols = table.rows[0]?.cells.length || 3; // mặc định 3 cột nếu chưa có dòng nào

          for (let i = 0; i < numCols; i++) {
            const td = document.createElement('td');

            const wrapperDiv = document.createElement('div');
            wrapperDiv.className = 'table-cell-wrapper';
            wrapperDiv.style.position = 'relative';

            const checkbox = document.createElement('input');
            checkbox.type = 'checkbox';
            checkbox.className = 'table-cell-checkbox';
            Object.assign(checkbox.style, {
              position: 'absolute',
              top: '0px',
              right: '0px',
              width: '30px',
              height: '14px',
              zIndex: '1',
              display: 'none',
            });

            const textarea = document.createElement('textarea');
            textarea.rows = 1;
            textarea.value = '';
            Object.assign(textarea.style, {
              width: '100%',
              height: '100%',
              border: 'none', // ✨ bỏ viền
              resize: 'none',
              padding: '6px',
              boxSizing: 'border-box',
              fontFamily: 'inherit',
              backgroundColor:'#ffffff',
            });
            textarea.addEventListener('input', () => autoResizeTextarea(textarea));
            requestAnimationFrame(() => autoResizeTextarea(textarea));

            wrapperDiv.appendChild(checkbox);
            wrapperDiv.appendChild(textarea);
            td.appendChild(wrapperDiv);
            newRow.appendChild(td);
          }

          table.appendChild(newRow);
        };

        // Nút xoá hàng cuối
      const deleteRowBtn = document.createElement('button');
      deleteRowBtn.type = 'button';
      deleteRowBtn.textContent = '➖ Xoá hàng cuối';
      Object.assign(deleteRowBtn.style, {
        backgroundColor: '#ff9800',
        color: 'white',
        border: 'none',
        padding: '6px 12px',
        borderRadius: '5px',
        cursor: 'pointer',
        fontWeight: '600',
      });
      deleteRowBtn.onmouseenter = () => (deleteRowBtn.style.backgroundColor = '#e68a00');
      deleteRowBtn.onmouseleave = () => (deleteRowBtn.style.backgroundColor = '#ff9800');
      deleteRowBtn.onclick = () => {
        if (table.rows.length > 0) {
          table.deleteRow(table.rows.length - 1);
        }
      };


      const tableFooter = document.createElement('div');
      Object.assign(tableFooter.style, {
        display: 'flex',
        justifyContent: 'space-between', // căn 2 đầu trái phải
        marginTop: '10px',
      });

      // Container bên trái (chứa nút Xoá bảng)
      const rightContainer = document.createElement('div');
      rightContainer.appendChild(deleteTableBtn);
      

      // Container bên phải (chứa 3 nút còn lại)
      const leftContainer = document.createElement('div');
      leftContainer.style.display = 'flex';
      leftContainer.style.gap = '10px'; // khoảng cách giữa các nút
      leftContainer.appendChild(pasteBtn);
      leftContainer.appendChild(addRowBtn);
      leftContainer.appendChild(deleteRowBtn);

      // Gắn 2 container vào footer
      tableFooter.appendChild(leftContainer);
      tableFooter.appendChild(rightContainer);



      config.appendChild(rowsLabel);
      config.appendChild(colsLabel);
      config.appendChild(createBtn);
      config.appendChild(selectBtn);
      config.appendChild(confirmMergeBtn);
      config.appendChild(cancelMergeBtn);
    
    // **Nút dán dữ liệu clipboard**
  

  // Popup modal dán dữ liệu (ẩn mặc định)
  const pasteModal = document.createElement('div');
  Object.assign(pasteModal.style, {
    position: 'fixed',
    top: '0', left: '0', right: '0', bottom: '0',
    backgroundColor: 'rgba(0,0,0,0.5)',
    display: 'none',
    justifyContent: 'center',
    alignItems: 'center',
    zIndex: '1000',
  });

  const pasteModalContent = document.createElement('div');
  Object.assign(pasteModalContent.style, {
    backgroundColor: 'white',
    padding: '20px',
    borderRadius: '8px',
    width: '60%',
    maxWidth: '90%',
    display: 'flex',
    flexDirection: 'column',
  });

  const pasteTextarea = document.createElement('textarea');
  pasteTextarea.placeholder = 'Dán dữ liệu bảng tại đây (từ Excel, Sheets, ...)';
  pasteTextarea.style.width = '100%';
  pasteTextarea.style.height = '150px';
  pasteTextarea.style.resize = 'vertical';
  pasteTextarea.style.marginBottom = '12px';
  pasteTextarea.style.fontFamily = 'monospace';

  const pasteButtons = document.createElement('div');
  pasteButtons.style.display = 'flex';
  pasteButtons.style.justifyContent = 'flex-end';
  pasteButtons.style.gap = '10px';

  const pasteConfirmBtn = document.createElement('button');
  pasteConfirmBtn.type = 'button';
  pasteConfirmBtn.textContent = 'Nhập dữ liệu vào bảng';
  Object.assign(pasteConfirmBtn.style, {
    backgroundColor: '#28a745',
    color: 'white',
    border: 'none',
    padding: '6px 12px',
    borderRadius: '5px',
    cursor: 'pointer',
    fontWeight: '600',
  });

  const pasteCancelBtn = document.createElement('button');
  pasteCancelBtn.type = 'button';
  pasteCancelBtn.textContent = 'Huỷ';
  Object.assign(pasteCancelBtn.style, {
    backgroundColor: '#dc3545',
    color: 'white',
    border: 'none',
    padding: '6px 12px',
    borderRadius: '5px',
    cursor: 'pointer',
    fontWeight: '600',
  });

  pasteButtons.appendChild(pasteCancelBtn);
  pasteButtons.appendChild(pasteConfirmBtn);

  pasteModalContent.appendChild(pasteTextarea);
  pasteModalContent.appendChild(pasteButtons);
  pasteModal.appendChild(pasteModalContent);

  // Thêm modal vào body
  document.body.appendChild(pasteModal);

  function createStyledTextarea(value = '') {
    const textarea = document.createElement('textarea');
    textarea.value = value;
    textarea.rows = 1;
    textarea.style.width = '100%';
    textarea.style.resize = 'none';
    textarea.style.fontFamily = 'inherit';
    textarea.style.border = 'none';
    textarea.style.backgroundColor = '#ffffff';
    textarea.style.outline = 'none';
    textarea.style.padding = '4px';
    return textarea;
  }

  function insertPastedDataToTable(text) {
    if (!text) return;

    const rows = text.trim().split(/\r?\n/).map(row => row.split('\t'));

    const colCount = Math.max(...rows.map(r => r.length));
    const currentCols = table.rows[0]?.cells.length || 0;
    const totalCols = Math.max(currentCols, colCount);

    for (let r = 0; r < rows.length; r++) {
      const tr = document.createElement('tr');
      for (let c = 0; c < totalCols; c++) {
        const td = document.createElement('td');
        const ta = createStyledTextarea(rows[r][c] || '');
        autoResizeTextarea(ta);
        td.appendChild(ta);
        tr.appendChild(td);
      }
      table.appendChild(tr);
    }
  }



  // Xử lý mở popup dán dữ liệu
  pasteBtn.onclick = () => {
    pasteTextarea.value = '';
    pasteModal.style.display = 'flex';
    pasteTextarea.focus();
  };

  // Huỷ popup
  pasteCancelBtn.onclick = () => {
    pasteModal.style.display = 'none';
  };

  // Xác nhận dán dữ liệu
  pasteConfirmBtn.onclick = () => {
    const text = pasteTextarea.value;
    insertPastedDataToTable(text);
    pasteModal.style.display = 'none';
  };


  const table = document.createElement('table');
  table.className = 'editable-table resizable';
  Object.assign(table.style, {
    width: '100%',
    tableLayout: 'auto',
    borderCollapse: 'collapse',
    marginTop: '10px'
  });
  

  function syncRowHeight(tr) {
    let maxHeight = 0;
    const textareas = tr.querySelectorAll('textarea');
    textareas.forEach(ta => {
      ta.style.height = 'auto';
      const h = ta.scrollHeight;
      if (h > maxHeight) maxHeight = h;
    });
    textareas.forEach(ta => {
      ta.style.height = maxHeight + 'px';
    });
  }

  function createTable(rows, cols) {
    table.innerHTML = '';
    for (let r = 0; r < rows; r++) {
      const tr = document.createElement('tr');
      for (let c = 0; c < cols; c++) {
        const td = document.createElement('td');
        td.style.border = '1px solid #ccc';
        td.style.padding = '4px';

        const wrapperDiv = document.createElement('div');
        wrapperDiv.className = 'table-cell-wrapper';

        const checkbox = document.createElement('input');
        checkbox.type = 'checkbox';
        checkbox.className = 'table-cell-checkbox';
        checkbox.style.position = 'absolute';
        checkbox.style.top = '0px';
        checkbox.style.right = '0px';           // ✅ Đặt bên phải thay vì dùng left
        checkbox.style.width = '30px';          // Tuỳ chỉnh kích thước
        checkbox.style.height = '14px';
        checkbox.style.zIndex = '1';
        checkbox.style.display = 'none';



        const textarea = document.createElement('textarea');
          textarea.rows = 1;
          textarea.style.width = '100%';
          textarea.style.resize = 'none';
          textarea.style.fontFamily = 'inherit';
          textarea.style.border = 'none';
          textarea.style.backgroundColor = '#ffffff';
        
        textarea.addEventListener('input', () => {
          autoResizeTextarea(textarea);
          syncRowHeight(tr);
        });

        autoResizeTextarea(textarea);

        wrapperDiv.appendChild(checkbox);
        wrapperDiv.appendChild(textarea);
        td.appendChild(wrapperDiv);
        tr.appendChild(td);
      }
      table.appendChild(tr);
    }
    makeColumnsResizable(table);
  }

  function makeColumnsResizable(table) {
    const firstRow = table.rows[0];
    if (!firstRow) return;

    for (let cell of firstRow.cells) {
      const wrapper = cell.querySelector('.table-cell-wrapper');
      if (!wrapper) continue;

      const resizer = document.createElement('div');
      resizer.style.width = '5px';
      resizer.style.height = '100%';
      resizer.style.position = 'absolute';
      resizer.style.top = '0';
      resizer.style.right = '0';
      resizer.style.cursor = 'col-resize';
      resizer.style.userSelect = 'none';
      resizer.style.zIndex = '10';

      wrapper.style.position = 'relative'; // đảm bảo chứa được resizer
      wrapper.appendChild(resizer);

      let startX, startWidth;

      resizer.addEventListener('mousedown', function (e) {
        startX = e.pageX;
        startWidth = cell.offsetWidth;

        function onMouseMove(e) {
          const newWidth = startWidth + (e.pageX - startX);
          cell.style.width = newWidth + 'px';
        }

        function onMouseUp() {
          document.removeEventListener('mousemove', onMouseMove);
          document.removeEventListener('mouseup', onMouseUp);
        }

        document.addEventListener('mousemove', onMouseMove);
        document.addEventListener('mouseup', onMouseUp);
      });
    }
  }


  createBtn.onclick = () => {
    const rows = parseInt(rowsInput.value);
    const cols = parseInt(colsInput.value);
    if (rows > 0 && cols > 0) {
      createTable(rows, cols);
    } else {
      alert('Số hàng và số cột phải lớn hơn 0');
    }
  };

  

  let isSelecting = false;

  selectBtn.onclick = () => {
    isSelecting = true;
    selectBtn.style.display = 'none';
    confirmMergeBtn.style.display = 'inline-block';
    cancelMergeBtn.style.display = 'inline-block';

    const checkboxes = table.querySelectorAll('.table-cell-checkbox');
    checkboxes.forEach(cb => {
      cb.checked = false;
      cb.style.display = 'block';
    });
  };

  cancelMergeBtn.onclick = () => {
    isSelecting = false;
    selectBtn.style.display = 'inline-block';
    confirmMergeBtn.style.display = 'none';
    cancelMergeBtn.style.display = 'none';

    const checkboxes = table.querySelectorAll('.table-cell-checkbox');
    checkboxes.forEach(cb => {
      cb.checked = false;
      cb.style.display = 'none';
    });
  };

  addRowBtn.onclick = () => {
    const cols = table.rows[0]?.cells.length || 1;
    const tr = document.createElement('tr');

    for (let c = 0; c < cols; c++) {
      const td = document.createElement('td');
      td.style.border = '1px solid #ccc';
      td.style.padding = '4px';

      const wrapperDiv = document.createElement('div');
      wrapperDiv.className = 'table-cell-wrapper';

      const checkbox = document.createElement('input');
      checkbox.type = 'checkbox';
      checkbox.className = 'table-cell-checkbox';
      checkbox.style.position = 'absolute';
      checkbox.style.top = '0px';
      checkbox.style.right = '0px';
      checkbox.style.width = '30px';
      checkbox.style.height = '14px';
      checkbox.style.zIndex = '1';
      checkbox.style.display = 'none';

      const textarea = document.createElement('textarea');
      textarea.rows = 1;
      textarea.style.width = '100%';
      textarea.style.resize = 'none';
      textarea.style.fontFamily = 'inherit';
      textarea.style.border ='none';
      textarea.style.backgroundColor = '#ffffff';
      textarea.addEventListener('input', () => {
        autoResizeTextarea(textarea);
        syncRowHeight(tr);
      });

      autoResizeTextarea(textarea);

      wrapperDiv.appendChild(checkbox);
      wrapperDiv.appendChild(textarea);
      td.appendChild(wrapperDiv);
      tr.appendChild(td);
    }

    table.appendChild(tr);
    
  };


  // Hàm tính vị trí cột "ảo" dựa trên colSpan của các ô trong 1 hàng
  function getCellsPositionsInRow(row) {
    const positions = [];
    let colPos = 0;
    for (const cell of row.cells) {
      positions.push({ cell, startCol: colPos, colSpan: cell.colSpan || 1 });
      colPos += cell.colSpan || 1;
    }
    return positions;
  }

  // Hàm kiểm tra các ô có liền kề trong 1 hàng không
  function areCellsContiguousInRow(row, selectedCells) {
    const positions = getCellsPositionsInRow(row);

    const selectedPositions = positions.filter(p => selectedCells.includes(p.cell));

    // Sắp xếp theo vị trí cột ảo
    selectedPositions.sort((a, b) => a.startCol - b.startCol);

    for (let i = 1; i < selectedPositions.length; i++) {
      const prev = selectedPositions[i - 1];
      const curr = selectedPositions[i];
      if (prev.startCol + prev.colSpan !== curr.startCol) {
        return false;
      }
    }
    return true;
  }

  // Hàm tính vị trí hàng "ảo" dựa trên rowSpan của các ô trong 1 cột
  function getCellsPositionsInCol(table, colIndex) {
    const positions = [];
    let rowPos = 0;
    for (let r = 0; r < table.rows.length; r++) {
      const row = table.rows[r];
      let colCount = 0;
      for (const cell of row.cells) {
        const colSpan = cell.colSpan || 1;
        const rowSpan = cell.rowSpan || 1;
        if (colCount === colIndex) {
          positions.push({ cell, startRow: rowPos, rowSpan });
          break;
        }
        colCount += colSpan;
      }
      rowPos++;
    }
    return positions;
  }

  // Kiểm tra các ô có liền kề trong 1 cột không
  function areCellsContiguousInCol(table, colIndex, selectedCells) {
    const positions = getCellsPositionsInCol(table, colIndex);

    const selectedPositions = positions.filter(p => selectedCells.includes(p.cell));

    // Sắp xếp theo vị trí hàng ảo
    selectedPositions.sort((a, b) => a.startRow - b.startRow);

    for (let i = 1; i < selectedPositions.length; i++) {
      const prev = selectedPositions[i - 1];
      const curr = selectedPositions[i];
      if (prev.startRow + prev.rowSpan !== curr.startRow) {
        return false;
      }
    }
    return true;
  }

  // Hàm tạo ma trận 2D bảng (dùng cho vị trí thực tế của các ô, hỗ trợ rowspan/colspan)
function buildTableMatrix(table) {
  const matrix = [];
  const rows = table.rows.length;
  for (let r = 0; r < rows; r++) matrix[r] = [];
  for (let r = 0; r < rows; r++) {
    const row = table.rows[r];
    let colPos = 0;
    for (let c = 0; c < row.cells.length; c++) {
      const cell = row.cells[c];
      const rowSpan = cell.rowSpan || 1;
      const colSpan = cell.colSpan || 1;

      // Tìm vị trí trống đầu tiên trên hàng r
      while (matrix[r][colPos]) colPos++;

      // Đánh dấu cell chiếm vị trí (r..r+rowSpan, colPos..colPos+colSpan)
      for (let rs = 0; rs < rowSpan; rs++) {
        for (let cs = 0; cs < colSpan; cs++) {
          matrix[r + rs][colPos + cs] = cell;
        }
      }

      colPos += colSpan;
    }
  }
  return matrix;
}

// Hàm lấy vị trí (row, col) thực tế của các ô được chọn
function getSelectedCellsPositions(table, selectedCells) {
  const matrix = buildTableMatrix(table);
  const positions = [];
  for (let r = 0; r < matrix.length; r++) {
    for (let c = 0; c < matrix[r].length; c++) {
      const cell = matrix[r][c];
      if (selectedCells.includes(cell)) {
        if (!positions.find(p => p.cell === cell)) {
          positions.push({ cell, rowIndex: r, colIndex: c });
        }
      }
    }
  }
  return positions;
}

// Kiểm tra các ô có liền kề trong cùng hàng
function areCellsContiguousInRow(positions) {
  const row = positions[0].rowIndex;
  if (!positions.every(p => p.rowIndex === row)) return false;

  const cols = positions.map(p => p.colIndex).sort((a, b) => a - b);

  for (let i = 1; i < cols.length; i++) {
    if (cols[i] !== cols[i - 1] + 1) return false;
  }
  return true;
}

// Kiểm tra các ô có liền kề trong cùng cột
function areCellsContiguousInCol(positions) {
  const col = positions[0].colIndex;
  if (!positions.every(p => p.colIndex === col)) return false;

  const rows = positions.map(p => p.rowIndex).sort((a, b) => a - b);

  for (let i = 1; i < rows.length; i++) {
    if (rows[i] !== rows[i - 1] + 1) return false;
  }
  return true;
}

// Hàm gộp ô được chọn, dùng ma trận vị trí chính xác và set colSpan/rowSpan + width/height
confirmMergeBtn.onclick = () => {
  const checkboxes = table.querySelectorAll('.table-cell-checkbox:checked');
  const selectedCells = Array.from(checkboxes).map(cb => cb.closest('td'));

  if (selectedCells.length <= 1) {
    alert('Chọn ít nhất 2 ô để gộp');
    return;
  }

  const positions = getSelectedCellsPositions(table, selectedCells);

  const sameRow = positions.every(p => p.rowIndex === positions[0].rowIndex);
  const sameCol = positions.every(p => p.colIndex === positions[0].colIndex);

  if (!sameRow && !sameCol) {
    alert('Chỉ có thể gộp các ô cùng hàng hoặc cùng cột!');
    return;
  }

  if (sameRow) {
    if (!areCellsContiguousInRow(positions)) {
      alert('Các ô trong cùng hàng phải liền kề để gộp');
      return;
    }

    positions.sort((a, b) => a.colIndex - b.colIndex);

    const main = positions[0].cell;
    let content = '';

    positions.forEach((pos, idx) => {
      const ta = pos.cell.querySelector('textarea');
      if (ta && ta.value.trim()) content += (idx === 0 ? '' : '\n') + ta.value;
      if (idx > 0) pos.cell.remove();
    });

    const taMain = main.querySelector('textarea');
    taMain.value = content;

    main.colSpan = positions.length;
    main.style.width = ''; // Bỏ set width thủ công, để trình duyệt tự tính
    main.style.height = ''; // Reset chiều cao nếu có
    main.rowSpan = 1;
  }
 else if (sameCol) {
  if (!areCellsContiguousInCol(positions)) {
    alert('Các ô trong cùng cột phải liền kề để gộp');
    return;
  }

  positions.sort((a, b) => a.rowIndex - b.rowIndex);

  const main = positions[0].cell;
  let content = '';

  positions.forEach((pos, idx) => {
    const ta = pos.cell.querySelector('textarea');
    if (ta && ta.value.trim()) content += (idx === 0 ? '' : '\n') + ta.value;
    if (idx > 0) pos.cell.remove();
  });

  const taMain = main.querySelector('textarea');
  taMain.value = content;

  main.rowSpan = positions.length;
  main.colSpan = 1;
  main.style.width = ''; // reset chiều rộng nếu có

  // Tính chiều cao 1 ô chuẩn (rowSpan=1) ở cột gộp
  let singleCellHeight = 0;
  const colIndex = positions[0].colIndex;
  for (let r = 0; r < table.rows.length; r++) {
    let colCount = 0;
    const row = table.rows[r];
    for (const cell of row.cells) {
      if (colCount === colIndex && (cell.rowSpan || 1) === 1) {
        singleCellHeight = cell.getBoundingClientRect().height;
        break;
      }
      colCount += cell.colSpan || 1;
    }
    if (singleCellHeight) break;
  }

  if (singleCellHeight) {
    main.style.height = (singleCellHeight * positions.length) + 'px';
  } else {
    main.style.height = '';
  }
}


  // Reset lại trạng thái chọn và ẩn checkbox
  isSelecting = false;
  selectBtn.style.display = 'inline-block';
  confirmMergeBtn.style.display = 'none';
  cancelMergeBtn.style.display = 'none';

  const allCheckboxes = table.querySelectorAll('.table-cell-checkbox');
  allCheckboxes.forEach(cb => {
    cb.checked = false;
    cb.style.display = 'none';
  });
};



  wrapper.appendChild(title);
  wrapper.appendChild(config);
  wrapper.appendChild(table);
  wrapper.appendChild(tableFooter);
  container.appendChild(wrapper);
}



// Thêm ô nội dung phụ (textarea) trong mục con
function addExtraContent(button, containerOverride, level = 1) {
  const container = containerOverride || button.closest('.report-pvt-create__group').querySelector('.report-section__children');

  const wrapper = document.createElement('div');
  wrapper.className = 'report-subitem-extra';

  wrapper.style.backgroundColor = '#ffffff';
  wrapper.style.marginBottom = '10px';

  const textarea = document.createElement('textarea');
  textarea.placeholder = 'Nội dung';
  textarea.rows = 2;
  textarea.style.width = '100%';
  textarea.style.resize = 'vertical';
  textarea.addEventListener('input', () => autoResizeTextarea(textarea));
  autoResizeTextarea(textarea);

  const removeBtn = document.createElement('button');
    removeBtn.type = 'button';
    removeBtn.textContent = '❌ Xoá nội dung';

    Object.assign(removeBtn.style, {
      position: 'static',
      display: 'block',
      background: '#e94e4e',
      border: 'none',
      color: 'white',
      fontWeight: '700',
      padding: '8px 18px',
      borderRadius: '6px',
      cursor: 'pointer',
      fontSize: '1rem',
      boxShadow: '0 0 5px rgba(233, 78, 78, 0.666)',
      transition: 'background-color 0.3s ease',
      marginTop: '5px',
      userSelect: 'none',
      width: 'max-content'
    });
  
  const removeBtnWrapper = document.createElement('div');
    removeBtnWrapper.style.flexDirection = 'row-reverse';  
    removeBtnWrapper.style.display = 'flex'; 
    removeBtnWrapper.appendChild(removeBtn);

  removeBtn.onmouseenter = () => removeBtn.style.background = '#c43c3c';
  removeBtn.onmouseleave = () => removeBtn.style.background = '#e94e4e';

  removeBtn.onclick = () => {
    if (confirm('Bạn có chắc chắn muốn xoá nội dung này không?')) {
      wrapper.remove();
    }
  };

  wrapper.appendChild(textarea);
  wrapper.appendChild(removeBtnWrapper);
  container.appendChild(wrapper);
}

function collectTableData(tableEl) {
  const rows = tableEl?.rows || [];
  const matrix = []; // ma trận 2D đánh dấu ô đã lấy

  const cellsData = [];

  for (let r = 0; r < rows.length; r++) {
    const row = rows[r];
    let colIndex = 0;

    cellsData[r] = [];

    for (let c = 0; c < row.cells.length; c++) {
      // Tìm colIndex trống tiếp theo trong ma trận
      while (matrix[r] && matrix[r][colIndex]) {
        colIndex++;
      }

      const cell = row.cells[c];
      const textarea = cell.querySelector('textarea');

      const rowSpan = cell.rowSpan || 1;
      const colSpan = cell.colSpan || 1;

      // Chỉ lấy ô gốc (ô đầu tiên trong vùng gộp)
      cellsData[r][colIndex] = {
        text: textarea ? textarea.value.trim() : '',
        rowSpan,
        colSpan
      };

      // Đánh dấu các ô trong vùng gộp trong ma trận để bỏ qua sau
      for (let rs = 0; rs < rowSpan; rs++) {
        for (let cs = 0; cs < colSpan; cs++) {
          if (!matrix[r + rs]) matrix[r + rs] = [];
          matrix[r + rs][colIndex + cs] = true;
        }
      }

      colIndex += colSpan;
    }
  }

  return cellsData;
}


  // Thu thập dữ liệu đệ quy mục con + bảng, đúng thứ tự
// Thu thập dữ liệu đệ quy mục con + bảng, đúng thứ tự
function collectSectionData(section) {
  const group = document.querySelector(`[data-section="${section}"]`);
  if (!group) return [];

  const container = group.querySelector('.report-section__children');
  if (!container) return [];

  const results = [];

  Array.from(container.children).forEach(child => {
    if (child.classList.contains('report-subitem')) {
      const textarea = child.querySelector('textarea');
      const content = textarea?.value.trim() || '';
      const subContainer = child.querySelector('.report-section__children');
      const children = subContainer ? collectSectionChildren(subContainer) : [];
      results.push({ type: 'subitem', title: content, children });
    }

    else if (child.classList.contains('report-subitem-extra')) {
      const textarea = child.querySelector('textarea');
      const content = textarea?.value.trim() || '';
      results.push({ type: 'text', content });
    }

    else if (child.classList.contains('report-subtable')) {
      const title = child.querySelector('textarea')?.value.trim() || '';
      const tableEl = child.querySelector('table');
      const cells = collectTableData(tableEl);
      results.push({ type: 'table', title, cells });
    }
  });

  return results;
}

function collectSectionChildren(container) {
  const results = [];

  Array.from(container.children).forEach(child => {
    if (child.classList.contains('report-subitem')) {
      const textarea = child.querySelector('textarea');
      const content = textarea?.value.trim() || '';
      const subContainer = child.querySelector('.report-section__children');
      const children = subContainer ? collectSectionChildren(subContainer) : [];
      results.push({ type: 'text', content, children });
    }

    else if (child.classList.contains('report-subitem-extra')) {
      const textarea = child.querySelector('textarea');
      const content = textarea?.value.trim() || '';
      results.push({ type: 'text', content });
    }

    else if (child.classList.contains('report-subtable')) {
      const title = child.querySelector('textarea')?.value.trim() || '';
      const tableEl = child.querySelector('table');
      const cells = collectTableData(tableEl);
      results.push({ type: 'table', title, cells });
    }
  });

  return results;
}


async function loadReportDataFromTemplate() {
  try {
    const res = await fetch('/json/template-report.json');
    if (!res.ok) throw new Error('Không thể tải mẫu báo cáo');

    const data = await res.json();  // Dữ liệu từ JSON

    // Điền thông tin chung
    document.querySelector('[name="reportName"]').value = data.reportName || '';
    document.querySelector('[name="number"]').value = data.number || '';
    document.querySelector('[name="recipient"]').value = data.recipient || '';   
    document.querySelector('[name="receivers"]').value = data.receivers || '';
    document.querySelector('[name="signer"]').value = data.signer || '';
    document.querySelector('[name="position"]').value = data.position || '';

    // Render các phần nội dung
    for (const sectionName in data.sections) {
      const items = data.sections[sectionName];
      const container = document.querySelector(`[data-section="${sectionName}"] .report-section__children`);
      if (container) {
        renderSectionItems(container, items);
      }
    }

  } catch (error) {
    console.error('Lỗi khi tải mẫu báo cáo:', error);
  }
}


function makeColumnsResizable(table) {
  const firstRow = table.rows[0];
  if (!firstRow) return;

  for (let cell of firstRow.cells) {
    cell.style.position = 'relative'; // Đảm bảo position relative

    const resizer = document.createElement('div');
    resizer.style.width = '5px';
    resizer.style.height = '100%';
    resizer.style.position = 'absolute';
    resizer.style.top = '0';
    resizer.style.right = '0';
    resizer.style.cursor = 'col-resize';
    resizer.style.userSelect = 'none';
    resizer.style.zIndex = '10';

    cell.appendChild(resizer);

    let startX, startWidth;

    resizer.addEventListener('mousedown', function (e) {
      e.preventDefault();
      startX = e.pageX;
      startWidth = cell.offsetWidth;

      function onMouseMove(e) {
        const newWidth = startWidth + (e.pageX - startX);
        if (newWidth > 30) { // Đặt min width tránh quá nhỏ
          cell.style.width = newWidth + 'px';
        }
      }

      function onMouseUp() {
        document.removeEventListener('mousemove', onMouseMove);
        document.removeEventListener('mouseup', onMouseUp);
      }

      document.addEventListener('mousemove', onMouseMove);
      document.addEventListener('mouseup', onMouseUp);
    });
  }
}


function renderSectionItems(container, items) {
  container.innerHTML = ''; // Xoá cũ

  items.forEach(item => {
    if (item.type === 'subitem') {
      // Render mục con có title + children
      const wrapper = document.createElement('div');
      wrapper.className = 'report-subitem';
      Object.assign(wrapper.style, {
        marginBottom: '10px',
        border: '1px solid #ccc',
        padding: '10px',
        borderRadius: '8px',
        backgroundColor: '#ffffff',
      });

      // Tiêu đề mục con (textarea)
      const title = document.createElement('textarea');
      title.rows = 1;
      title.value = item.title || '';
      title.placeholder = 'Tiêu đề mục con';
      Object.assign(title.style, {
        width: '100%',
        marginBottom: '6px',
        fontWeight: '600',
        backgroundColor: '#ffffff',
        border: '1px solid #ccc',
        borderRadius: '4px',
        padding: '4px 8px',
        boxSizing: 'border-box',
        resize: 'none',
      });
      title.addEventListener('input', () => autoResizeTextarea(title));
      autoResizeTextarea(title);

      // Container chứa các phần tử con (children)
      const childrenContainer = document.createElement('div');
      childrenContainer.className = 'report-section__children';
      Object.assign(childrenContainer.style, {
        marginTop: '10px',
        borderLeft: '2px dashed #aaa',
        paddingLeft: '10px',
        backgroundColor: '#fafafa',
      });

      // Đệ quy render children
      if (item.children && item.children.length) {
        renderSectionItems(childrenContainer, item.children);
      }

      // Nút chức năng
      const buttonGroup = document.createElement('div');
      Object.assign(buttonGroup.style, {
        display: 'flex',
        justifyContent: 'space-between',
        gap: '10px',
        marginTop: '10px',
      });

      // Thêm nội dung con (text)
      const addExtraBtn = document.createElement('button');
      addExtraBtn.type = 'button';
      addExtraBtn.textContent = '➕ Thêm nội dung';
      Object.assign(addExtraBtn.style, {
        backgroundColor: '#007acc',
        color: '#fff',
        border: 'none',
        padding: '6px 12px',
        borderRadius: '5px',
        cursor: 'pointer',
        fontWeight: '600',
      });
      addExtraBtn.onmouseenter = () => (addExtraBtn.style.backgroundColor = '#005fa3');
      addExtraBtn.onmouseleave = () => (addExtraBtn.style.backgroundColor = '#007acc');
      addExtraBtn.onclick = () => addExtraContent(addExtraBtn, childrenContainer);

      // Thêm bảng
      const addTableBtn = document.createElement('button');
      addTableBtn.type = 'button';
      addTableBtn.textContent = '📊 Thêm bảng';
      Object.assign(addTableBtn.style, {
        backgroundColor: '#007acc',
        color: '#fff',
        border: 'none',
        padding: '6px 12px',
        borderRadius: '5px',
        cursor: 'pointer',
        fontWeight: '600',
      });
      addTableBtn.onmouseenter = () => (addTableBtn.style.backgroundColor = '#005fa3');
      addTableBtn.onmouseleave = () => (addTableBtn.style.backgroundColor = '#007acc');
      addTableBtn.onclick = () => addTable(addTableBtn, null, childrenContainer);

      // Xoá mục con
      const removeBtn = document.createElement('button');
      removeBtn.type = 'button';
      removeBtn.textContent = '❌ Xoá mục ';
      Object.assign(removeBtn.style, {
        backgroundColor: '#e94e4e',
        color: 'white',
        border: 'none',
        padding: '6px 12px',
        borderRadius: '5px',
        cursor: 'pointer',
        fontWeight: '600',
      });
      removeBtn.onmouseenter = () => (removeBtn.style.backgroundColor = '#c43c3c');
      removeBtn.onmouseleave = () => (removeBtn.style.backgroundColor = '#e94e4e');
      removeBtn.onclick = () => {
        if (confirm('Bạn có chắc chắn muốn xoá mục này không?')) {
          wrapper.remove();
        }
      };

      buttonGroup.appendChild(addExtraBtn);
      buttonGroup.appendChild(addTableBtn);
      buttonGroup.appendChild(removeBtn);

      wrapper.appendChild(title);
      wrapper.appendChild(childrenContainer);
      wrapper.appendChild(buttonGroup);
      container.appendChild(wrapper);
    }
    if (item.type === 'text') {
      const wrapper = document.createElement('div');
      wrapper.className = 'report-subitem-extra';  
      Object.assign(wrapper.style, {
        marginBottom: '10px',
        border: '1px solid #ccc',
        borderRadius: '8px',
        padding: '10px',
        backgroundColor: '#ffffff',
      });

      const textarea = document.createElement('textarea');
      textarea.rows = 2;
      textarea.value = item.content || '';
      textarea.addEventListener('input', () => autoResizeTextarea(textarea));
      textarea.style.transition = 'height 0.2s ease';
      requestAnimationFrame(() => autoResizeTextarea(textarea));



      textarea.value = item.content || '';
      textarea.placeholder = 'Nội dung';
      Object.assign(textarea.style, {
        width: '100%',
        border: '1px solid #ccc',
        borderRadius: '4px',
        padding: '4px 8px',
        boxSizing: 'border-box',
        resize: 'none',
        fontFamily: 'inherit',
      });
      textarea.addEventListener('input', () => autoResizeTextarea(textarea));
      autoResizeTextarea(textarea);

      const removeBtn = document.createElement('button');
      removeBtn.type = 'button';
      removeBtn.textContent = '❌ Xoá nội dung';
      Object.assign(removeBtn.style, {
        backgroundColor: '#e94e4e',
        color: 'white',
        border: 'none',
        padding: '6px 12px',
        borderRadius: '5px',
        cursor: 'pointer',
        fontWeight: '600',
      });
      removeBtn.onmouseenter = () => (removeBtn.style.backgroundColor = '#c43c3c');
      removeBtn.onmouseleave = () => (removeBtn.style.backgroundColor = '#e94e4e');
      removeBtn.onclick = () => {
        if (confirm('Bạn có chắc chắn muốn xoá nội dung này không?')) {
          wrapper.remove();
        }
      };

      // Bọc nút xóa trong div căn sang phải
      const removeBtnWrapper = document.createElement('div');
      removeBtnWrapper.style.display = 'flex';
      removeBtnWrapper.style.justifyContent = 'flex-end';
      removeBtnWrapper.style.marginTop = '5px';
      removeBtnWrapper.appendChild(removeBtn);

      wrapper.appendChild(textarea);
      wrapper.appendChild(removeBtnWrapper);
      container.appendChild(wrapper);
    }

    else if (item.type === 'table') {
      const wrapper = document.createElement('div');
      wrapper.className = 'report-subtable';
      wrapper.style.overflowX = 'auto'; // tránh bảng bị tràn

      const title = document.createElement('textarea');
      title.rows = 1;
      title.value = item.title || '';
      title.placeholder = 'Tiêu đề bảng';
      Object.assign(title.style, {
        width: '100%',
        marginBottom: '10px',
        fontWeight: '600',
        backgroundColor: '#ffffff',
        border: '1px solid #ccc',
        borderRadius: '4px',
        padding: '4px 8px',
        boxSizing: 'border-box',
        resize: 'none',
      });
      title.addEventListener('input', () => autoResizeTextarea(title));
      autoResizeTextarea(title);

      const table = document.createElement('table');
      table.className = 'editable-table resizable';
      Object.assign(table.style, {
        width: '100',
        maxWidth: '100%',
        tableLayout: 'auto',
        borderCollapse: 'collapse',
      });

      const cells = item.cells || [];
      for (let r = 0; r < cells.length; r++) {
        const row = document.createElement('tr');
        for (let c = 0; c < cells[r].length; c++) {
          const cellData = cells[r][c];
          if (!cellData) continue;

          const td = document.createElement('td');
          td.rowSpan = cellData.rowSpan || 1;
          td.colSpan = cellData.colSpan || 1;
          td.style.border = '1px solid #ccc';
          td.style.padding = '4px';
          td.style.position = 'relative'; // để chứa resizer

          const wrapperDiv = document.createElement('div');
          wrapperDiv.className = 'table-cell-wrapper';
          Object.assign(wrapperDiv.style, {
            position: 'relative',
            width: '100%',
            height: '100%',
            boxSizing: 'border-box',
          });

          const checkbox = document.createElement('input');
          checkbox.type = 'checkbox';
          checkbox.className = 'table-cell-checkbox';
          Object.assign(checkbox.style, {
            position: 'absolute',
            top: '0px',
            right: '0px',
            width: '30px',
            height: '14px',
            zIndex: '1',
            display: 'none',
          });

          const textarea = document.createElement('textarea');
          textarea.rows = 1;
          textarea.value = cellData.text || '';
          Object.assign(textarea.style, {
            minHeight: '30px',
            border: 'none',
            resize: 'none',
            padding: '4px 6px',
            fontFamily: 'inherit',
            backgroundColor: '#ffffff',
            boxSizing: 'border-box',
            overflow: 'hidden',
          });

          textarea.addEventListener('input', () => autoResizeTextarea(textarea));
          requestAnimationFrame(() => autoResizeTextarea(textarea));

          wrapperDiv.appendChild(checkbox);
          wrapperDiv.appendChild(textarea);
          td.appendChild(wrapperDiv);
          row.appendChild(td);
        }
        table.appendChild(row);
      }


      const pasteBtn = document.createElement('button');
      pasteBtn.type = 'button';
      pasteBtn.textContent = '📋 Dán dữ liệu';
      Object.assign(pasteBtn.style, {
        backgroundColor: '#6f42c1',
        color: 'white',
        border: 'none',
        padding: '6px 12px',
        borderRadius: '5px',
        cursor: 'pointer',
        fontWeight: '600',
      });

            // Tạo modal dán dữ liệu (chỉ tạo một lần)
      const pasteModal = document.createElement('div');
      Object.assign(pasteModal.style, {
        position: 'fixed',
        top: '0',
        left: '0',
        width: '100vw',
        height: '100vh',
        backgroundColor: 'rgba(0, 0, 0, 0.5)',
        display: 'none',
        alignItems: 'center',
        justifyContent: 'center',
        zIndex: '1000'
      });

      const pasteBox = document.createElement('div');
      Object.assign(pasteBox.style, {
        backgroundColor: 'white',
        padding: '20px',
        borderRadius: '8px',
        width: '500px',
        maxWidth: '90%',
        display: 'flex',
        flexDirection: 'column',
      });


      const pasteTextarea = document.createElement('textarea');
      pasteTextarea.placeholder = 'Dán dữ liệu từ Excel hoặc bảng...';
      Object.assign(pasteTextarea.style, {
        width: '100%',
        height: '150px',
        marginBottom: '10px',
        resize: 'vertical'
      });

      const pasteButtons = document.createElement('div');
      Object.assign(pasteButtons.style, {
        display: 'flex',
        justifyContent: 'flex-end',
        gap: '10px'
      });

      const pasteConfirmBtn = document.createElement('button');
      pasteConfirmBtn.textContent = 'Nhập dữ liệu vào bảng';
      Object.assign(pasteConfirmBtn.style, {
        backgroundColor: '#28a745',
        color: 'white',
        border: 'none',
        padding: '6px 12px',
        borderRadius: '5px',
        cursor: 'pointer',
        fontWeight: '600',
      });

      const pasteCancelBtn = document.createElement('button');
      pasteCancelBtn.type = 'button';
      pasteCancelBtn.textContent = 'Huỷ';
      Object.assign(pasteCancelBtn.style, {
        backgroundColor: '#dc3545',
        color: 'white',
        border: 'none',
        padding: '6px 12px',
        borderRadius: '5px',
        cursor: 'pointer',
        fontWeight: '600',
      });

      // Đảm bảo thứ tự hợp lý: Huỷ bên trái, Nhập bên phải
      pasteButtons.appendChild(pasteCancelBtn);
      pasteButtons.appendChild(pasteConfirmBtn);


      pasteBox.appendChild(pasteTextarea);
      pasteBox.appendChild(pasteButtons);
      pasteModal.appendChild(pasteBox);
      document.body.appendChild(pasteModal);

      // Xử lý mở popup
      pasteBtn.onclick = () => {
        pasteTextarea.value = '';
        pasteModal.style.display = 'flex';
        pasteTextarea.focus();
      };

      // Huỷ popup
      pasteCancelBtn.onclick = () => {
        pasteModal.style.display = 'none';
      };

      // Hàm dán dữ liệu vào bảng
      function insertPastedDataToTable(text, table) {
        if (!text) return;

        const rows = text.trim().split(/\r?\n/).map(row => row.split('\t'));

        // Lấy số cột từ hàng cuối cùng hiện có của bảng
        const lastRow = table.rows[table.rows.length - 1];
        const currentCols = lastRow 
          ? Array.from(lastRow.cells).reduce((sum, cell) => sum + (parseInt(cell.colSpan) || 1), 0)
          : 0;

        const colCount = Math.max(...rows.map(r => r.length));
        const totalCols = Math.max(currentCols, colCount);

        rows.forEach(dataRow => {
          const tr = document.createElement('tr');

          for (let c = 0; c < totalCols; c++) {
            const td = document.createElement('td');

            const wrapperDiv = document.createElement('div');
            wrapperDiv.className = 'table-cell-wrapper';
            wrapperDiv.style.position = 'relative';

            const checkbox = document.createElement('input');
            checkbox.type = 'checkbox';
            checkbox.className = 'table-cell-checkbox';
            Object.assign(checkbox.style, {
              position: 'absolute',
              top: '0px',
              right: '0px',
              width: '30px',
              height: '14px',
              zIndex: '1',
              display: 'none',
            });

            const textarea = document.createElement('textarea');
            textarea.rows = 1;
            textarea.value = dataRow[c] || '';
            Object.assign(textarea.style, {
              width: '100%',
              height: '100%',
              border: 'none',
              resize: 'none',
              padding: '6px',
              boxSizing: 'border-box',
              fontFamily: 'inherit',
              backgroundColor: '#ffffff',
            });

            textarea.addEventListener('input', () => autoResizeTextarea(textarea));
            requestAnimationFrame(() => autoResizeTextarea(textarea));

            wrapperDiv.appendChild(checkbox);
            wrapperDiv.appendChild(textarea);
            td.appendChild(wrapperDiv);
            tr.appendChild(td);
          }

          table.appendChild(tr);
        });
      }


      // Xác nhận dán dữ liệu
      pasteConfirmBtn.onclick = () => {
        insertPastedDataToTable(pasteTextarea.value, table);
        pasteModal.style.display = 'none';
      };


      const deleteTableBtn = document.createElement('button');
      deleteTableBtn.type = 'button';
      deleteTableBtn.textContent = '❌ Xoá bảng';
      Object.assign(deleteTableBtn.style, {
        backgroundColor: '#e94e4e',
        color: 'white',
        border: 'none',
        padding: '6px 12px',
        borderRadius: '5px',
        cursor: 'pointer',
        fontWeight: '600',
      });

      deleteTableBtn.onclick = () => {
        if (confirm('Bạn có chắc chắn muốn xoá bảng này không?')) {
          wrapper.remove();
        }
      };

      const addRowBtn = document.createElement('button');
        addRowBtn.type = 'button';
        addRowBtn.textContent = '➕ Thêm hàng';
        Object.assign(addRowBtn.style, {
          backgroundColor: '#17a2b8',
          color: 'white',
          border: 'none',
          padding: '6px 12px',
          borderRadius: '5px',
          cursor: 'pointer',
          fontWeight: '600',
        });
        
        addRowBtn.onclick = () => {
          const newRow = document.createElement('tr');

          // Nếu có dòng nào rồi thì tạo số cột bằng dòng đầu tiên
          const lastRow = table.rows[table.rows.length - 1];
          const numCols = Array.from(lastRow?.cells || []).reduce((sum, cell) => {
            return sum + (parseInt(cell.colSpan) || 1);
          }, 0) || 3;


          for (let i = 0; i < numCols; i++) {
            const td = document.createElement('td');

            const wrapperDiv = document.createElement('div');
            wrapperDiv.className = 'table-cell-wrapper';
            wrapperDiv.style.position = 'relative';

            const checkbox = document.createElement('input');
            checkbox.type = 'checkbox';
            checkbox.className = 'table-cell-checkbox';
            Object.assign(checkbox.style, {
              position: 'absolute',
              top: '0px',
              right: '0px',
              width: '30px',
              height: '14px',
              zIndex: '1',
              display: 'none',
            });

            const textarea = document.createElement('textarea');
            textarea.rows = 1;
            textarea.value = '';
            Object.assign(textarea.style, {
              width: '100%',
              height: '100%',
              border: 'none', // ✨ bỏ viền
              resize: 'none',
              padding: '6px',
              boxSizing: 'border-box',
              fontFamily: 'inherit',
              backgroundColor:'#ffffff',
            });
            textarea.addEventListener('input', () => autoResizeTextarea(textarea));
            requestAnimationFrame(() => autoResizeTextarea(textarea));

            wrapperDiv.appendChild(checkbox);
            wrapperDiv.appendChild(textarea);
            td.appendChild(wrapperDiv);
            newRow.appendChild(td);
          }

          table.appendChild(newRow);
        };

        // Nút xoá hàng cuối
      const deleteRowBtn = document.createElement('button');
      deleteRowBtn.type = 'button';
      deleteRowBtn.textContent = '➖ Xoá hàng cuối';
      Object.assign(deleteRowBtn.style, {
        backgroundColor: '#ff9800',
        color: 'white',
        border: 'none',
        padding: '6px 12px',
        borderRadius: '5px',
        cursor: 'pointer',
        fontWeight: '600',
      });
      deleteRowBtn.onmouseenter = () => (deleteRowBtn.style.backgroundColor = '#e68a00');
      deleteRowBtn.onmouseleave = () => (deleteRowBtn.style.backgroundColor = '#ff9800');
      deleteRowBtn.onclick = () => {
        if (table.rows.length > 0) {
          table.deleteRow(table.rows.length - 1);
        }
      };

    
  
     const tableFooter = document.createElement('div');
      Object.assign(tableFooter.style, {
        display: 'flex',
        justifyContent: 'space-between', // căn 2 đầu trái phải
        marginTop: '10px',
      });

      // Container bên trái (chứa nút Xoá bảng)
      const rightContainer = document.createElement('div');
      rightContainer.appendChild(deleteTableBtn);
      

      // Container bên phải (chứa 3 nút còn lại)
      const leftContainer = document.createElement('div');
      leftContainer.style.display = 'flex';
      leftContainer.style.gap = '10px'; // khoảng cách giữa các nút
      leftContainer.appendChild(pasteBtn);
      leftContainer.appendChild(addRowBtn);
      leftContainer.appendChild(deleteRowBtn);

      // Gắn 2 container vào footer
      tableFooter.appendChild(leftContainer);
      tableFooter.appendChild(rightContainer);


      

      wrapper.appendChild(title);
      wrapper.appendChild(table);
      wrapper.appendChild(tableFooter);
      makeColumnsResizable(table);

      container.appendChild(wrapper);
    }
  });
}

window.addEventListener('DOMContentLoaded', () => {
  loadReportDataFromTemplate();
});


// Gửi dữ liệu
    document.getElementById('createReportForm').addEventListener('submit', function (e) {
      e.preventDefault();

      const form = e.target;
      const data = {
        reportName: form.reportName.value,
        number: form.number.value,
        recipient: form.recipient.value,
        createdAt: form.createdAt.value,
        username: window.user.name,
        receivers: form.receivers.value,
        signer: form.signer.value,
        position: form.position.value,
        sections: {}
      };

      const sectionKeys = ['bscKpi', 'tuh', 'ptm', 'cntt', 'vhm', 'khcp', 'conclusion', 'kientnghi_ldtt', 'kientnghi_dvkhac', 'kehoach_tuh', 'kehoach_ptm', 'kehoach_cntt', 'kehoach_vhm', 'kehoach_khcp'];

      sectionKeys.forEach(section => {
        data.sections[section] = collectSectionData(section);
      });

      console.log('Dữ liệu :', data);

      fetch('/report/pvt', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(data),
      }).then(res => res.json())
        .then(result => {
          if (result.success) {
            showAlert('Lưu báo cáo thành công!','success');
            setTimeout(() => window.location.href = '/report/pvt/view', 1000);
          }
          else showAlert('Lỗi lưu báo cáo','error');
        }).catch(() => showAlert('Lỗi kết nối server','error'));
    });


</script>
