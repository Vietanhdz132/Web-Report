<div class="header-dashboard">
  <div class="title-dashboard">
    <h2>{{title}}</h2>
  </div>

  <div class="filter-group">
    <div class="filter-item">
      <label for="stationSelect">Đài:</label>
      <select id="stationSelect">
        <option value="all">Tất cả đài</option>
      </select>
    </div>

    <div class="filter-item">
      <label for="yearSelect">Năm:</label>
      <select id="yearSelect"></select>
    </div>
    <div class="filter-item">
      <label for="monthSelect">Tháng:</label>
      <select id="monthSelect">
        <option value="all">Tất cả tháng</option>
      </select>
    </div>
    <div class="filter-item">
      <label for="daySelect">Ngày:</label>
      <select id="daySelect">
        <option value="all">Tất cả ngày</option>
      </select>
    </div>
  </div>
</div>

<div class = "body-dashboard">

  <div class = "item-sum">

    {{!-- <div id="average-card" >
      <p>Đang tải...</p>
    </div> --}}

    <div  class="stat-card">
      <div class="stat-title">Thời gian MLL trung bình</div>
      <div class="stat-unit" id="unit-average-card" ></div>
      <div id="average-card" class="stat-value loader"></div>
      <div class="stat-footer" id="date-average-card" ></div>
      


    </div>

    <div  class="stat-card">
      <div class="stat-title">Thời gian MLL trung bình ngày</div>
      <div class="stat-unit" id="unit-average-card-day" ></div>
      <div id="average-card-day" class="stat-value loader"></div>
      <div class="stat-footer" id="date-average-card-day" ></div>
    </div>

    <div  class="stat-card">
      <div class="stat-title">Thời gian MLL trung bình đêm</div>
      <div class="stat-unit" id="unit-average-card-night" ></div>
      <div id="average-card-night" class="stat-value loader"></div>
      <div class="stat-footer" id="date-average-card-night" ></div>
    </div>

    <div  class="stat-card">
      <div class="stat-title">Avg TgMLL</div>
      <div class="stat-unit" id="unit-average-card" ></div>
      <div id="average-card" class="stat-value loader"></div>
      <div class="stat-footer" id="date-average-card" ></div>
    </div>
   

  </div>


  <div class="item-deltail">

    <div class = "item-body">

    <div class="stat-card">
      <div class="stat-title">Thời gian mất liên lạc trung bình theo Đài</div>
      <canvas id="mllChart"></canvas>
      <div class="stat-footer" id="date-average-detail-card" ></div>
    </div>


    <div  class="stat-card">
      <div class="stat-title"></div>
      <div id="average-card" class="stat-value loader"></div>
      <div class="stat-footer" id="date-average-card" ></div>
    </div>

    <div  class="stat-card">
      <div class="stat-title"></div>
      <div id="average-card" class="stat-value loader"></div>
      <div class="stat-footer" id="date-average-card" ></div>
    </div>

    <div class="stat-card">
      <div class="stat-title"></div>
      <div id="average-card" class="stat-value loader"></div>
      <div class="stat-footer" id="date-average-card" ></div>
    </div>

  </div>

  

  <div class = "item-body">
    <div class="stat-card">
      <div class="stat-title"></div>
      <div id="average-card" class="stat-value loader"></div>
      <div class="stat-footer" id="date-average-card" ></div>
    </div>

    <div class="stat-card">
      <div class="stat-title"></div>
      <div id="average-card" class="stat-value loader"></div>
      <div class="stat-footer" id="date-average-card" ></div>
    </div>

    <div class="stat-card">
      <div class="stat-title"></div>
      <div id="average-card" class="stat-value loader"></div>
      <div class="stat-footer" id="date-average-card" ></div>
    </div>

    <div class="stat-card">
      <div class="stat-title"></div>
      <div id="average-card" class="stat-value loader"></div>
      <div class="stat-footer" id="date-average-card" ></div>
    </div>
  </div>

</div>
  </div>



{{!-- <script>
  let fullDayData = []; // Dữ liệu ngày để tạo slicer và dùng khi chọn ngày

  async function fetchDayData() {
    // Lấy dữ liệu ngày đầu tiên khi load
    const res = await fetch('/dashboard/average-duration?filterType=day');
    const json = await res.json();
    if (!json.success) {
      document.getElementById('average-card').innerHTML = '<p>Lỗi tải dữ liệu</p>';
      return;
    }
    fullDayData = json.data;
    

    // Khởi tạo slicer năm, tháng, ngày
    initSlicers(fullDayData);

    // Mặc định gọi API trung bình năm với năm gần nhất
    const latestYear = getLatestYear(fullDayData);
    fetchYearAverage(latestYear);
  }

  function initSlicers(data) {
    // Lấy danh sách năm từ dữ liệu ngày
    const yearSelect = document.getElementById('yearSelect');
    const years = [...new Set(data.map(d => d.PERIOD.split('/')[2]))].sort((a,b) => b - a);
    yearSelect.innerHTML = years.map(y => `<option value="${y}">${y}</option>`).join('');
    yearSelect.value = years[0];

    updateMonths(years[0]);
    updateDays('all');

    // Gán event
    yearSelect.onchange = () => {
      updateMonths(yearSelect.value);
      updateDays('all');
      fetchYearAverage(yearSelect.value);
    };

    document.getElementById('monthSelect').onchange = (e) => {
      const month = e.target.value;
      updateDays(month);
      if (month === 'all') {
        fetchYearAverage(yearSelect.value);
      } else {
        fetchMonthAverage(yearSelect.value, month);
      }
    };

    document.getElementById('daySelect').onchange = (e) => {
      const day = e.target.value;
      if (day === 'all') {
        // Nếu chọn tất cả ngày, tùy theo chọn tháng
        const month = document.getElementById('monthSelect').value;
        if (month === 'all') {
          fetchYearAverage(yearSelect.value);
        } else {
          fetchMonthAverage(yearSelect.value, month);
        }
      } else {
        showDayAverage(day, document.getElementById('monthSelect').value, yearSelect.value);
      }
    };
  }

  function updateMonths(year) {
    const monthSelect = document.getElementById('monthSelect');
    const filtered = fullDayData.filter(d => d.PERIOD.endsWith(year));
    const months = [...new Set(filtered.map(d => d.PERIOD.split('/')[1]))].sort((a,b) => a - b);

    monthSelect.innerHTML = `<option value="all">Tất cả tháng</option>` +
      months.map(m => `<option value="${m}">${m}</option>`).join('');
    monthSelect.value = 'all';
  }

  function updateDays(month) {
    const daySelect = document.getElementById('daySelect');
    const year = document.getElementById('yearSelect').value;

    if (month === 'all') {
      daySelect.innerHTML = `<option value="all">Tất cả ngày</option>`;
      daySelect.value = 'all';
      return;
    }

    const filteredMonth = fullDayData.filter(d => d.PERIOD.endsWith(`${month}/${year}`));
    const days = [...new Set(filteredMonth.map(d => d.PERIOD.split('/')[0]))].sort((a,b) => a - b);

    daySelect.innerHTML = `<option value="all">Tất cả ngày</option>` +
      days.map(d => `<option value="${d}">${d}</option>`).join('');
    daySelect.value = 'all';
  }

  function getLatestYear(data) {
    return [...new Set(data.map(d => d.PERIOD.split('/')[2]))].sort((a,b) => b - a)[0];
  }

  // Hàm gọi API lấy trung bình năm
  async function fetchYearAverage(year) {
    const res = await fetch(`/dashboard/average-duration?filterType=year&year=${year}`);
    const json = await res.json();
    if (!json.success) return;

    const avg = json.data.length > 0 ? json.data[0].AVG_DURATION_TOTAL : 0;
    const avg_day = json.data.length > 0 ? json.data[0].AVG_DURATION_DAYTIME : 0;
    const avg_night = json.data.length > 0 ? json.data[0].AVG_DURATION_NIGHTTIME : 0;
    
    document.getElementById('average-card').classList.remove('loader');
    document.getElementById('average-card').innerHTML = `<div>${avg.toFixed(2)}</div>`;
    document.getElementById('date-average-card').innerHTML = `<div><strong>Năm ${year}</strong></div>`;

    document.getElementById('average-card-day').classList.remove('loader');
    document.getElementById('average-card-day').innerHTML = `<div>${avg_day.toFixed(2)}</div>`;
    document.getElementById('date-average-card-day').innerHTML = `<div><strong>Năm ${year}</strong></div>`;

    document.getElementById('average-card-night').classList.remove('loader');
    document.getElementById('average-card-night').innerHTML = `<div>${avg_night.toFixed(2)}</div>`;
    document.getElementById('date-average-card-night').innerHTML = `<div><strong>Năm ${year}</strong></div>`;
  }

  // Hàm gọi API lấy trung bình tháng
  async function fetchMonthAverage(year, month) {
    const res = await fetch(`/dashboard/average-duration?filterType=month&year=${year}&month=${month}`);
    const json = await res.json();
    if (!json.success) return;

    const avg = json.data.length > 0 ? json.data[0].AVG_DURATION_TOTAL : 0;
    const avg_day = json.data.length > 0 ? json.data[0].AVG_DURATION_DAYTIME : 0;
    const avg_night = json.data.length > 0 ? json.data[0].AVG_DURATION_NIGHTTIME : 0;

    document.getElementById('average-card').classList.remove('loader');
    document.getElementById('average-card').innerHTML = `<div>${avg.toFixed(2)}</div>`;
    document.getElementById('date-average-card').innerHTML = `<div><strong>Tháng ${month}/${year}</strong></div>`;

    document.getElementById('average-card-day').classList.remove('loader');
    document.getElementById('average-card-day').innerHTML = `<div>${avg_day.toFixed(2)}</div>`;
    document.getElementById('date-average-card-day').innerHTML = `<div><strong>Tháng ${month}/${year}</strong></div>`;

    document.getElementById('average-card-night').classList.remove('loader');
    document.getElementById('average-card-night').innerHTML = `<div>${avg_night.toFixed(2)}</div>`;
    document.getElementById('date-average-card-night').innerHTML = `<div><strong>Tháng ${month}/${year}</strong></div>`;
  }

  // Hiển thị trung bình ngày từ dữ liệu đã load fullDayData (không gọi API)
  function showDayAverage(day, month, year) {
    const periodStr = `${day}/${month}/${year}`;
    const dayData = fullDayData.find(d => d.PERIOD === periodStr);
    const avg = dayData ? dayData.AVG_DURATION_TOTAL : 0;
    const avg_day = dayData ? dayData.AVG_DURATION_DAYTIME : 0;
    const avg_night = dayData ? dayData.AVG_DURATION_NIGHTTIME : 0;

    document.getElementById('average-card').classList.remove('loader');
    document.getElementById('average-card').innerHTML = `<div>${avg.toFixed(2)}</div>`;
    document.getElementById('date-average-card').innerHTML = `<div><strong>Ngày ${periodStr}</strong></div>`;

    document.getElementById('average-card-day').classList.remove('loader');
    document.getElementById('average-card-day').innerHTML = `<div>${avg_day.toFixed(2)}</div>`;
    document.getElementById('date-average-card-day').innerHTML = `<div><strong>Ngày ${periodStr}</strong></div>`;

    document.getElementById('average-card-night').classList.remove('loader');
    document.getElementById('average-card-night').innerHTML = `<div>${avg_night.toFixed(2)}</div>`;
    document.getElementById('date-average-card-night').innerHTML = `<div><strong>Ngày ${periodStr}</strong></div>`;
  }

  // Khi load trang
  fetchDayData();

</script> --}}

<script>
  async function loadSlicers() {
    try {
      const response = await fetch('/dashboard/slicer-duration');
      const json = await response.json();

      if (!json.success) throw new Error("API trả về thất bại");

      const { DVT, DATE_TREE } = json.data;

      window.DATE_TREE = DATE_TREE;

      const stationSelect = document.getElementById('stationSelect');
      const yearSelect = document.getElementById('yearSelect');
      const monthSelect = document.getElementById('monthSelect');
      const daySelect = document.getElementById('daySelect');

      // Populate Đài
      DVT.forEach(station => {
        const option = document.createElement('option');
        option.value = station;
        option.textContent = station;
        stationSelect.appendChild(option);
      });

      // Populate Năm
      const years = Object.keys(DATE_TREE).sort();
      yearSelect.innerHTML = '';
      years.forEach(year => {
        const option = document.createElement('option');
        option.value = year;
        option.textContent = year;
        yearSelect.appendChild(option);
      });

      const latestYear = years[years.length - 1];
      yearSelect.value = latestYear;

      populateMonths(latestYear); // tháng mặc định: tất cả + danh sách

      // --- Events ---
      yearSelect.addEventListener('change', () => {
        const selectedYear = yearSelect.value;
        populateMonths(selectedYear); // cập nhật lại tháng khi đổi năm
        clearDays(); // reset ngày
      });

      monthSelect.addEventListener('change', () => {
        const selectedYear = yearSelect.value;
        const selectedMonth = monthSelect.value;
        if (selectedMonth !== 'all') {
          populateDays(selectedYear, selectedMonth);
        } else {
          clearDays();
        }
        fetchAverageDurations(); // GỌI LẠI API SAU KHI CHỌN THÁNG
      });


    } catch (err) {
      console.error("Lỗi khi tải slicer:", err);
    }
  }

  function populateMonths(year) {
    const months = Object.keys(DATE_TREE[year] || {}).sort();
    const monthSelect = document.getElementById('monthSelect');
    monthSelect.innerHTML = '';

    const allOption = document.createElement('option');
    allOption.value = 'all';
    allOption.textContent = 'Tất cả tháng';
    monthSelect.appendChild(allOption);

    months.forEach(month => {
      const option = document.createElement('option');
      option.value = month;
      option.textContent = month;
      monthSelect.appendChild(option);
    });

    monthSelect.value = 'all';
  }

  function populateDays(year, month) {
    const days = (DATE_TREE[year] && DATE_TREE[year][month]) || [];
    const sortedDays = [...days].sort();
    const daySelect = document.getElementById('daySelect');
    daySelect.innerHTML = '';

    const allOption = document.createElement('option');
    allOption.value = 'all';
    allOption.textContent = 'Tất cả ngày';
    daySelect.appendChild(allOption);

    sortedDays.forEach(day => {
      const option = document.createElement('option');
      option.value = day;
      option.textContent = day;
      daySelect.appendChild(option);
    });

    daySelect.value = 'all';
  }

  function clearDays() {
    const daySelect = document.getElementById('daySelect');
    daySelect.innerHTML = '';
    const allOption = document.createElement('option');
    allOption.value = 'all';
    allOption.textContent = 'Tất cả ngày';
    daySelect.appendChild(allOption);
    daySelect.value = 'all';
    fetchAverageDurations(); // GỌI LẠI API SAU KHI RESET NGÀY
  }


  async function fetchAverageDurations() {
    try {
      const dvt = document.getElementById('stationSelect').value;
      const year = document.getElementById('yearSelect').value;
      const month = document.getElementById('monthSelect').value;
      const day = document.getElementById('daySelect').value;


      const params = new URLSearchParams();
      if (dvt !== 'all') params.append('dvt', dvt);
      if (year !== 'all') params.append('year', year);
      if (month !== 'all') params.append('month', month);
      if (day !== 'all') params.append('day', day);

      
      const response = await fetch(`/dashboard/average-duration?${params.toString()}`);
      const data = await response.json();
        
      

      // Lấy dữ liệu items[0] trong data[0]
      const firstGroup = data.data[0];
      const firstItem = firstGroup.items && firstGroup.items[0];

      if (!firstItem) throw new Error('Không có dữ liệu items');
      const dvt_card = firstItem.DVT;
      const date = firstItem.PERIOD;
      const avg = firstItem.AVG_DURATION_TOTAL;
      const avg_day = firstItem.AVG_DURATION_DAYTIME;
      const avg_night = firstItem.AVG_DURATION_NIGHTTIME;

      document.getElementById('average-card').classList.remove('loader');
      document.getElementById('average-card').innerHTML = `<div>${avg.toFixed(2)}</div>`;
      document.getElementById('unit-average-card').innerHTML = `<div><strong>${dvt_card}</strong></div>`;
      document.getElementById('date-average-card').innerHTML = `<div><strong>${date}</strong></div>`;


      document.getElementById('average-card-day').classList.remove('loader');
      document.getElementById('average-card-day').innerHTML = `<div>${avg_day.toFixed(2)}</div>`;
      document.getElementById('unit-average-card-day').innerHTML = `<div><strong>${dvt_card}</strong></div>`;
      document.getElementById('date-average-card-day').innerHTML = `<div><strong>${date}</strong></div>`;

      document.getElementById('average-card-night').classList.remove('loader')
      document.getElementById('average-card-night').innerHTML = `<div>${avg_night.toFixed(2)}</div>`;
      document.getElementById('unit-average-card-night').innerHTML = `<div><strong>${dvt_card}</strong></div>`;
      document.getElementById('date-average-card-night').innerHTML = `<div><strong>${date}</strong></div>`;

    } catch (error) {
      console.error('Lỗi khi tải dữ liệu trung bình:', error);
    }
  }

  function attachSlicerEvents() {
    ['stationSelect', 'yearSelect', 'monthSelect', 'daySelect'].forEach(id => {
      const element = document.getElementById(id);
      if (element) {
        element.addEventListener('change', fetchAverageDurations);
      }
    });
  }

  // Gọi khi trang tải xong
  window.onload = function () {
    loadSlicers();     // Tải dữ liệu vào slicer
    attachSlicerEvents();
    fetchAverageDurations();  // Lắng nghe thay đổi
  };
</script>

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script src="https://cdn.jsdelivr.net/npm/chartjs-plugin-datalabels"></script>

<script>
  const chartCanvas = document.getElementById('mllChart');
  let chartInstance = null;

  async function fetchDataAndUpdateChart() {
    {{!-- const dvt = stationSelect.value; --}}
    const year = yearSelect.value;
    const month = monthSelect.value;
    const day = daySelect.value;

    const query = new URLSearchParams();
    {{!-- if (dvt !== 'all') query.append('dvt', dvt); --}}
    if (year !== 'all') query.append('year', year);
    if (month !== 'all') query.append('month', month);
    if (day !== 'all') query.append('day', day);

    const response = await fetch(`/dashboard/average-duration-detail?${query.toString()}`);
    const json = await response.json();
    const data = json.data;

    const labels = data.map(entry => entry.DVT);
    const daytimeData = data.map(entry => entry.items[0]?.AVG_DURATION_DAYTIME || 0);
    const nighttimeData = data.map(entry => entry.items[0]?.AVG_DURATION_NIGHTTIME || 0);

    const footer = document.getElementById('date-average-detail-card');
    footer.innerText = data[0]?.PERIOD || 'Không có dữ liệu';
    
    updateChart(labels, daytimeData, nighttimeData);
  }

  function updateChart(labels, daytimeData, nighttimeData) {
  if (chartInstance) chartInstance.destroy();

  const ctx = chartCanvas.getContext('2d'); // lấy context 2d của canvas

  // Gradient Bar ngày
  const daytimeGradient = ctx.createLinearGradient(0, 0, 0, 400);
  daytimeGradient.addColorStop(0, '#f9e79f');
  daytimeGradient.addColorStop(1, '#f1c40f');

  // Gradient Bar đêm
  const nighttimeGradient = ctx.createLinearGradient(0, 0, 0, 400);
  nighttimeGradient.addColorStop(0, '#85c1e9');
  nighttimeGradient.addColorStop(1, '#3498db');

  // Gradient Line tổng
  const lineGradient = ctx.createLinearGradient(0, 0, chartCanvas.width, 0);
  lineGradient.addColorStop(0, '#e74c3c');
  lineGradient.addColorStop(1, '#c0392b');

  const totalData = labels.map((_, i) => daytimeData[i] + nighttimeData[i]);

  chartInstance = new Chart(chartCanvas, {
    type: 'bar',
    data: {
      labels: labels,
      datasets: [
        {
          label: 'Ban ngày (phút)',
          data: daytimeData,
          backgroundColor: daytimeGradient,
          borderRadius: 12,
          barPercentage: 0.6,
          stack: 'stack1',
          hoverBackgroundColor: '#f39c12',
          datalabels: {
            color: '#000',
            anchor: 'center',
            align: 'center',
            formatter: value => value.toFixed(2),
            font: { weight: 'bold', size: 10 }
          }
        },
         {
          label: 'Ban đêm (phút)',
          data: nighttimeData,
          backgroundColor: nighttimeGradient,
          borderRadius: 12,
          barPercentage: 0.6,
          stack: 'stack1',
          hoverBackgroundColor: '#2980b9',
          datalabels: {
            color: '#000',
            anchor: 'center',
            align: 'center',
            formatter: value => value.toFixed(2),
            font: { weight: 'bold', size: 10 }
          }
        },
        {
          label: 'Tổng (phút)',
          data: totalData,
          type: 'line',
          yAxisID: 'y',
          order: 99,
          stack: null,
          borderColor: lineGradient,
          backgroundColor: 'rgba(231, 76, 60, 0.2)',
          borderWidth: 3,
          pointRadius: 3,
          pointHoverRadius: 8,
          pointBackgroundColor: '#e74c3c',
          pointHoverBackgroundColor: '#c0392b',
          fill: false,
          tension: 0.4,
          datalabels: {
            align: 'end',
            anchor: 'end',
            offset: -5,
            color: '#e74c3c',
            formatter: value => `${value.toFixed(2)}`,
            font: { weight: 'bold', size: 11 }
          }
        }
      ]
    },
    options: {
      responsive: true,
      animation: {
        duration: 1000,
        easing: 'easeOutQuart'
      },
      plugins: {
        legend: {
          position: 'top',
          labels: {
            font: { weight: 'bold', size: 14 }
          }
        },
        legend: {
          position: 'top',
          labels: {
            font: {
              weight: 'bold',
              size: 14
            },
            padding: 10,
            usePointStyle: true,
            pointStyle: 'rectRounded'
          }
        },
        tooltip: {
          mode: 'index',
          intersect: false,
          backgroundColor: 'rgba(0,0,0,0.8)',
          titleFont: { weight: 'bold', size: 14 },
          bodyFont: { size: 13 },
          callbacks: {
            label: ctx => {
              const val = ctx.raw;
              return `${ctx.dataset.label}: ${val.toFixed(2)} phút`;
            }
          }
        },
        datalabels: {
          display: true,
          clamp: true
        }
      },
      interaction: {
        mode: 'index',
        intersect: false
      },
      scales: {
        x: { stacked: true, grid: { display: false }, ticks: { font: { weight: 'bold' } } },
        y: {
          stacked: true,
          grid: { display: false },
        
          ticks: { font: { weight: 'bold' } }
        }
      }
    },
    plugins: [ChartDataLabels]
  });
}




  // Gọi hàm khi filter thay đổi
  stationSelect.addEventListener('change', fetchDataAndUpdateChart);
  yearSelect.addEventListener('change', fetchDataAndUpdateChart);
  monthSelect.addEventListener('change', fetchDataAndUpdateChart);
  daySelect.addEventListener('change', fetchDataAndUpdateChart);

  // Gọi lần đầu
  fetchDataAndUpdateChart();
</script>

